# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lower_intf', [dirname(__file__)])
        except ImportError:
            import _lower_intf
            return _lower_intf
        if fp is not None:
            try:
                _mod = imp.load_module('_lower_intf', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lower_intf = swig_import_helper()
    del swig_import_helper
else:
    import _lower_intf
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_lower_intf.PRIuPTR_swigconstant(_lower_intf)
PRIuPTR = _lower_intf.PRIuPTR

_lower_intf.PRIdPTR_swigconstant(_lower_intf)
PRIdPTR = _lower_intf.PRIdPTR

_lower_intf.LLU_swigconstant(_lower_intf)
LLU = _lower_intf.LLU

_lower_intf.LLO_swigconstant(_lower_intf)
LLO = _lower_intf.LLO

_lower_intf.LLX_swigconstant(_lower_intf)
LLX = _lower_intf.LLX

_lower_intf.false_swigconstant(_lower_intf)
false = _lower_intf.false

_lower_intf.true_swigconstant(_lower_intf)
true = _lower_intf.true

_lower_intf.OUTCOME_GENERIC_ERROR_swigconstant(_lower_intf)
OUTCOME_GENERIC_ERROR = _lower_intf.OUTCOME_GENERIC_ERROR

_lower_intf.OUTCOME_PARSER_ERROR_swigconstant(_lower_intf)
OUTCOME_PARSER_ERROR = _lower_intf.OUTCOME_PARSER_ERROR

_lower_intf.OUTCOME_SYNTAX_ERROR_swigconstant(_lower_intf)
OUTCOME_SYNTAX_ERROR = _lower_intf.OUTCOME_SYNTAX_ERROR

_lower_intf.OUTCOME_FILE_ERROR_swigconstant(_lower_intf)
OUTCOME_FILE_ERROR = _lower_intf.OUTCOME_FILE_ERROR

_lower_intf.OUTCOME_SUCCESS_REQUIRED_HELP_swigconstant(_lower_intf)
OUTCOME_SUCCESS_REQUIRED_HELP = _lower_intf.OUTCOME_SUCCESS_REQUIRED_HELP

_lower_intf.OUTCOME_SUCCESS_swigconstant(_lower_intf)
OUTCOME_SUCCESS = _lower_intf.OUTCOME_SUCCESS

def proposition_at_time(enc: 'BeEnc_ptr', formula: 'node_ptr', time: 'int') -> "be_ptr":
    """proposition_at_time(BeEnc_ptr enc, node_ptr formula, int time) -> be_ptr"""
    return _lower_intf.proposition_at_time(enc, formula, time)

def succ(k: 'int', l: 'int', time: 'int') -> "int":
    """succ(int k, int l, int time) -> int"""
    return _lower_intf.succ(k, l, time)

def loop_condition(enc: 'BeEnc_ptr', k: 'int', l: 'int') -> "be_ptr":
    """loop_condition(BeEnc_ptr enc, int k, int l) -> be_ptr"""
    return _lower_intf.loop_condition(enc, k, l)

def fairness_constraint(fsm: 'BeFsm_ptr', k: 'int', l: 'int') -> "be_ptr":
    """fairness_constraint(BeFsm_ptr fsm, int k, int l) -> be_ptr"""
    return _lower_intf.fairness_constraint(fsm, k, l)

def sem_no_loop_offset(fsm: 'BeFsm_ptr', formula: 'node_ptr', time: 'int', bound: 'int', offset: 'int') -> "be_ptr":
    """sem_no_loop_offset(BeFsm_ptr fsm, node_ptr formula, int time, int bound, int offset) -> be_ptr"""
    return _lower_intf.sem_no_loop_offset(fsm, formula, time, bound, offset)

def sem_with_loop_offset(fsm: 'BeFsm_ptr', formula: 'node_ptr', time: 'int', bound: 'int', loop: 'int', offset: 'int') -> "be_ptr":
    """sem_with_loop_offset(BeFsm_ptr fsm, node_ptr formula, int time, int bound, int loop, int offset) -> be_ptr"""
    return _lower_intf.sem_with_loop_offset(fsm, formula, time, bound, loop, offset)

def MEMOIZER_key(wff: 'node_ptr', time: 'int', k: 'int', l: 'int') -> "node_ptr":
    """MEMOIZER_key(node_ptr wff, int time, int k, int l) -> node_ptr"""
    return _lower_intf.MEMOIZER_key(wff, time, k, l)

def MEMOIZER_get(key: 'node_ptr') -> "be_ptr":
    """MEMOIZER_get(node_ptr key) -> be_ptr"""
    return _lower_intf.MEMOIZER_get(key)

def MEMOIZER_put(key: 'node_ptr', be: 'be_ptr') -> "void":
    """MEMOIZER_put(node_ptr key, be_ptr be)"""
    return _lower_intf.MEMOIZER_put(key, be)

def MEMOIZER_clear() -> "void":
    """MEMOIZER_clear()"""
    return _lower_intf.MEMOIZER_clear()

def NO_MEMOIZE_sem_no_loop_offset(fsm: 'BeFsm_ptr', formula: 'node_ptr', time: 'int', bound: 'int', offset: 'int') -> "be_ptr":
    """NO_MEMOIZE_sem_no_loop_offset(BeFsm_ptr fsm, node_ptr formula, int time, int bound, int offset) -> be_ptr"""
    return _lower_intf.NO_MEMOIZE_sem_no_loop_offset(fsm, formula, time, bound, offset)

def NO_MEMOIZE_sem_with_loop_offset(fsm: 'BeFsm_ptr', formula: 'node_ptr', time: 'int', bound: 'int', loop: 'int', offset: 'int') -> "be_ptr":
    """NO_MEMOIZE_sem_with_loop_offset(BeFsm_ptr fsm, node_ptr formula, int time, int bound, int loop, int offset) -> be_ptr"""
    return _lower_intf.NO_MEMOIZE_sem_with_loop_offset(fsm, formula, time, bound, loop, offset)
# This file is compatible with both classic and new-style classes.


