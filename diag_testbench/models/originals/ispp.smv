-- Generated by MPL2SMV [$Id: mpl2smv.lisp,v 1.25 1999/08/10 23:41:47 pecheur Exp $]MODULE Mlatching-solenoid-valve VAR  Xcmd_in : {Vopen, Vclose, Vno-command};  Xadmittance : {Voff, Vlow, Vhigh};  mode : {Vopen, Vclosed, Vstuck-closed, Vstuck-open, Vpartially-open, Vunknown-valve-fault};DEFINE  fault_modes := {Vstuck-closed, Vstuck-open, Vpartially-open, Vunknown-valve-fault};  broken := (mode in fault_modes);  brokencount := broken;INIT (mode = Vclosed)TRANS (((mode = Vopen) & (Xcmd_in = Vclose)) -> (next(mode) in (Vclosed union fault_modes)))TRANS (((mode = Vopen) & !(Xcmd_in = Vclose)) -> (next(mode) in (Vopen union fault_modes)))TRANS (((mode = Vclosed) & (Xcmd_in = Vopen)) -> (next(mode) in (Vopen union fault_modes)))TRANS (((mode = Vclosed) & !(Xcmd_in = Vopen)) -> (next(mode) in (Vclosed union fault_modes)))TRANS ((mode = Vstuck-closed) -> (next(mode) in (Vstuck-closed union fault_modes)))TRANS ((mode = Vstuck-open) -> (next(mode) in (Vstuck-open union fault_modes)))TRANS ((mode = Vpartially-open) -> (next(mode) in (Vpartially-open union fault_modes)))TRANS ((mode = Vunknown-valve-fault) -> (next(mode) in (Vunknown-valve-fault union fault_modes)))INVAR ((mode = Vopen) -> (Xadmittance = Vhigh))INVAR ((mode = Vclosed) -> (Xadmittance = Voff))INVAR ((mode = Vstuck-closed) -> (Xadmittance = Voff))INVAR ((mode = Vstuck-open) -> (Xadmittance = Vhigh))INVAR ((mode = Vpartially-open) -> (Xadmittance = Vlow))MODULE Mvalve-mod VAR  Xflow : {Voff, Vlow, Vhigh};  Xadmittance : {Voff, Vlow, Vhigh};  Xparallel-combo : {Voff, Vlow, Vhigh};-- STRUCTURE  Xvalve_1 : Mlatching-solenoid-valve;  Xvalve_2 : Mlatching-solenoid-valve;  Xvalve_3 : Mlatching-solenoid-valve;DEFINE  broken := (Xvalve_3.broken | Xvalve_2.broken | Xvalve_1.broken);  brokencount := (Xvalve_3.brokencount + Xvalve_2.brokencount + Xvalve_1.brokencount);INVAR (((Xvalve_2.Xadmittance = Voff) & (Xvalve_3.Xadmittance = Voff)) -> (Xparallel-combo = Voff))INVAR (!((Xvalve_2.Xadmittance = Voff) & (Xvalve_3.Xadmittance = Voff)) -> ((((Xvalve_2.Xadmittance = Vhigh) | (Xvalve_3.Xadmittance = Vhigh)) -> (Xparallel-combo = Vhigh)) & (!((Xvalve_2.Xadmittance = Vhigh) | (Xvalve_3.Xadmittance = Vhigh)) -> (Xparallel-combo = Vlow))))INVAR (((Xvalve_1.Xadmittance = Voff) | (Xparallel-combo = Voff)) -> (Xadmittance = Voff))INVAR (!((Xvalve_1.Xadmittance = Voff) | (Xparallel-combo = Voff)) -> ((((Xvalve_1.Xadmittance = Vhigh) & (Xparallel-combo = Vhigh)) -> (Xadmittance = Vhigh)) & (!((Xvalve_1.Xadmittance = Vhigh) & (Xparallel-combo = Vhigh)) -> (Xadmittance = Vlow))))MODULE Mz_cell_heater VAR  Xpreheat : {Von, Voff, Vno-command};  Xpower : {Von, Voff};  Xheat-out : {Von, Voff};  mode : {Von, Voff, Vfailed-preheater};DEFINE  fault_modes := {Vfailed-preheater};  broken := (mode in fault_modes);  brokencount := broken;INIT (mode = Voff)TRANS (((mode = Von) & (Xpreheat = Voff)) -> (next(mode) in (Voff union fault_modes)))TRANS (((mode = Von) & !(Xpreheat = Voff)) -> (next(mode) in (Von union fault_modes)))TRANS (((mode = Voff) & (Xpreheat = Von)) -> (next(mode) in (Von union fault_modes)))TRANS (((mode = Voff) & !(Xpreheat = Von)) -> (next(mode) in (Voff union fault_modes)))TRANS ((mode = Vfailed-preheater) -> (next(mode) = Vfailed-preheater))INVAR (Xpower = Von)INVAR ((mode = Von) -> (Xheat-out = Xpower))INVAR ((mode = Voff) -> (Xheat-out = Voff))INVAR ((mode = Vfailed-preheater) -> (Xheat-out = Voff))MODULE Mpower-controller VAR  Xpower : {Von, Voff};  Xcmd_in : {Von, Voff, Vno-command};  Xvoltage : {Von, Voff};  mode : {Von, Voff, Vfailed-switch};DEFINE  fault_modes := {Vfailed-switch};  broken := (mode in fault_modes);  brokencount := broken;INIT (mode = Voff)TRANS (((mode = Von) & (Xcmd_in = Voff)) -> (next(mode) in (Voff union fault_modes)))TRANS (((mode = Von) & !(Xcmd_in = Voff)) -> (next(mode) in (Von union fault_modes)))TRANS (((mode = Voff) & (Xcmd_in = Von)) -> (next(mode) in (Von union fault_modes)))TRANS (((mode = Voff) & !(Xcmd_in = Von)) -> (next(mode) in (Voff union fault_modes)))TRANS ((mode = Vfailed-switch) -> (next(mode) = Vfailed-switch))INVAR (Xpower = Von)INVAR ((mode = Von) -> (((Xpower = Von) -> (Xvoltage = Von)) & (!(Xpower = Von) -> (Xvoltage = Voff))))INVAR ((mode = Voff) -> (Xvoltage = Voff))INVAR ((mode = Vfailed-switch) -> (Xvoltage = Voff))MODULE Mzirconia-cell VAR  Xvoltage : {Von, Voff};  Xheat-in : {Von, Voff};  Xflow-in : {Voff, Vlow, Vhigh};  Xadmittance : {Voff, Vlow, Vhigh};  Xflow_out : {Voff, Von};  Xtemp : {Vlow, Vnominal};  Xpress : {Vhigh, Vlow};  Xamps : {Voff, Vnominal};  Xpreheat : {Vachieved, Vrequired};  mode : {Vnominal, Vcracked-co2-side, Vcracked-o2-side, Vplugged};DEFINE  fault_modes := {Vcracked-co2-side, Vcracked-o2-side, Vplugged};  broken := (mode in fault_modes);  brokencount := broken;INIT (mode = Vnominal)INIT (Xpreheat = Vrequired)TRANS ((mode = Vnominal) -> (next(mode) in (Vnominal union fault_modes)))TRANS ((mode = Vcracked-co2-side) -> (next(mode) in (Vcracked-co2-side union fault_modes)))TRANS ((mode = Vcracked-o2-side) -> (next(mode) in (Vcracked-o2-side union fault_modes)))TRANS ((mode = Vplugged) -> (next(mode) in (Vplugged union fault_modes)))INVAR (((Xheat-in = Von) | (Xamps = Vnominal)) -> (Xtemp = Vnominal))INVAR (!((Xheat-in = Von) | (Xamps = Vnominal)) -> (Xtemp = Vlow))TRANS ((Xtemp = Vnominal) -> (next(Xpreheat) = Vachieved))TRANS (!(Xtemp = Vnominal) -> (next(Xpreheat) = Vrequired))INVAR ((mode = Vnominal) -> ((Xadmittance = Vlow) & (((Xflow-in = Vlow) -> (Xpress = Vhigh)) & (!(Xflow-in = Vlow) -> (Xpress = Vlow))) & (((((Xpreheat = Vrequired) & (Xheat-in = Voff)) | (Xvoltage = Voff) | (Xflow-in = Voff)) -> ((Xamps = Voff) & (Xflow_out = Voff))) & (!(((Xpreheat = Vrequired) & (Xheat-in = Voff)) | (Xvoltage = Voff) | (Xflow-in = Voff)) -> ((Xamps = Vnominal) & (Xflow_out = Von))))))INVAR ((mode = Vcracked-co2-side) -> ((Xadmittance = Vhigh) & (Xpress = Vlow)))INVAR ((mode = Vcracked-o2-side) -> ((((Xflow-in = Vlow) -> (Xpress = Vhigh)) & (!(Xflow-in = Vlow) -> (Xpress = Vlow))) & (Xadmittance = Vlow) & (Xflow_out = Voff) & (Xamps = Vnominal)))INVAR ((mode = Vplugged) -> ((Xadmittance = Voff) & (Xamps = Voff) & (Xflow_out = Voff)))MODULE Mz_cell_module VAR-- STRUCTURE  Xheater : Mz_cell_heater;  Xswitch : Mpower-controller;  Xcell : Mzirconia-cell;DEFINE  broken := (Xcell.broken | Xswitch.broken | Xheater.broken);  brokencount := (Xcell.brokencount + Xswitch.brokencount + Xheater.brokencount);INVAR (Xswitch.Xvoltage = Xcell.Xvoltage)INVAR (Xheater.Xheat-out = Xcell.Xheat-in)MODULE Mzirc-valve-module VAR  Xflow : {Voff, Vlow, Vhigh};  Xadmittance : {Voff, Vlow, Vhigh};  Xbranch1-admit : {Voff, Vlow, Vhigh};  Xbranch2-admit : {Voff, Vlow, Vhigh};-- STRUCTURE  Xz_cell_1 : Mz_cell_module;  Xz_cell_2 : Mz_cell_module;  Xvalve_1 : Mlatching-solenoid-valve;  Xvalve_2 : Mlatching-solenoid-valve;DEFINE  broken := (Xvalve_2.broken | Xvalve_1.broken | Xz_cell_2.broken | Xz_cell_1.broken);  brokencount := (Xvalve_2.brokencount + Xvalve_1.brokencount + Xz_cell_2.brokencount + Xz_cell_1.brokencount);INVAR ((Xflow = Voff) -> ((Xz_cell_1.Xcell.Xflow-in = Voff) & (Xz_cell_2.Xcell.Xflow-in = Voff)))INVAR (!(Xflow = Voff) -> (((Xflow = Vlow) -> (((((Xbranch1-admit = Vlow) & (Xbranch2-admit = Vlow)) | ((Xbranch1-admit = Vhigh) & (Xbranch2-admit = Vhigh))) -> ((Xz_cell_1.Xcell.Xflow-in = Vlow) & (Xz_cell_2.Xcell.Xflow-in = Vlow))) & (!(((Xbranch1-admit = Vlow) & (Xbranch2-admit = Vlow)) | ((Xbranch1-admit = Vhigh) & (Xbranch2-admit = Vhigh))) -> ((((Xbranch1-admit = Voff) | ((Xbranch1-admit = Vlow) & (Xbranch2-admit = Vhigh))) -> ((Xz_cell_1.Xcell.Xflow-in = Voff) & (Xz_cell_2.Xcell.Xflow-in = Vlow))) & (!((Xbranch1-admit = Voff) | ((Xbranch1-admit = Vlow) & (Xbranch2-admit = Vhigh))) -> ((Xz_cell_1.Xcell.Xflow-in = Vlow) & (Xz_cell_2.Xcell.Xflow-in = Voff))))))) & (!(Xflow = Vlow) -> ((((Xbranch1-admit = Vhigh) & (Xbranch2-admit = Vhigh)) -> ((Xz_cell_1.Xcell.Xflow-in = Vhigh) & (Xz_cell_2.Xcell.Xflow-in = Vhigh))) & (!((Xbranch1-admit = Vhigh) & (Xbranch2-admit = Vhigh)) -> ((((Xbranch1-admit = Vlow) | (Xbranch1-admit = Voff)) -> ((Xz_cell_1.Xcell.Xflow-in = Voff) & (Xz_cell_2.Xcell.Xflow-in = Vhigh))) & (!((Xbranch1-admit = Vlow) | (Xbranch1-admit = Voff)) -> ((Xz_cell_1.Xcell.Xflow-in = Vhigh) & (Xz_cell_2.Xcell.Xflow-in = Voff)))))))))INVAR (((Xbranch1-admit = Voff) & (Xbranch2-admit = Voff)) -> (Xadmittance = Voff))INVAR (!((Xbranch1-admit = Voff) & (Xbranch2-admit = Voff)) -> ((((Xbranch1-admit = Vhigh) | (Xbranch2-admit = Vhigh)) -> (Xadmittance = Vhigh)) & (!((Xbranch1-admit = Vhigh) | (Xbranch2-admit = Vhigh)) -> (Xadmittance = Vlow))))INVAR (((Xz_cell_2.Xcell.Xadmittance = Voff) | (Xvalve_2.Xadmittance = Voff)) -> (Xbranch2-admit = Voff))INVAR (!((Xz_cell_2.Xcell.Xadmittance = Voff) | (Xvalve_2.Xadmittance = Voff)) -> ((((Xz_cell_2.Xcell.Xadmittance = Vhigh) & (Xvalve_2.Xadmittance = Vhigh)) -> (Xbranch2-admit = Vhigh)) & (!((Xz_cell_2.Xcell.Xadmittance = Vhigh) & (Xvalve_2.Xadmittance = Vhigh)) -> (Xbranch2-admit = Vlow))))INVAR (((Xz_cell_1.Xcell.Xadmittance = Voff) | (Xvalve_1.Xadmittance = Voff)) -> (Xbranch1-admit = Voff))INVAR (!((Xz_cell_1.Xcell.Xadmittance = Voff) | (Xvalve_1.Xadmittance = Voff)) -> ((((Xz_cell_1.Xcell.Xadmittance = Vhigh) & (Xvalve_1.Xadmittance = Vhigh)) -> (Xbranch1-admit = Vhigh)) & (!((Xz_cell_1.Xcell.Xadmittance = Vhigh) & (Xvalve_1.Xadmittance = Vhigh)) -> (Xbranch1-admit = Vlow))))MODULE Mflow-control-valve VAR  Xcmd_in : {Vhigh, Vlow, Voff, Vno-command};  Xadmittance : {Voff, Vlow, Vhigh};  mode : {Vhigh-flow, Vlow-flow, Vclosed, Vstuck-closed, Vstuck-open, Vpartially-open, Vunknown-valve-fault};DEFINE  fault_modes := {Vstuck-closed, Vstuck-open, Vpartially-open, Vunknown-valve-fault};  broken := (mode in fault_modes);  brokencount := broken;INIT (mode = Vclosed)TRANS (((mode = Vhigh-flow) & (Xcmd_in = Voff)) -> (next(mode) in (Vclosed union fault_modes)))TRANS (((mode = Vhigh-flow) & (Xcmd_in = Vlow)) -> (next(mode) in (Vlow-flow union fault_modes)))TRANS (((mode = Vhigh-flow) & !((Xcmd_in = Voff) | (Xcmd_in = Vlow))) -> (next(mode) in (Vhigh-flow union fault_modes)))TRANS (((mode = Vlow-flow) & (Xcmd_in = Voff)) -> (next(mode) in (Vclosed union fault_modes)))TRANS (((mode = Vlow-flow) & (Xcmd_in = Vhigh)) -> (next(mode) in (Vhigh-flow union fault_modes)))TRANS (((mode = Vlow-flow) & !((Xcmd_in = Voff) | (Xcmd_in = Vhigh))) -> (next(mode) in (Vlow-flow union fault_modes)))TRANS (((mode = Vclosed) & (Xcmd_in = Vhigh)) -> (next(mode) in (Vhigh-flow union fault_modes)))TRANS (((mode = Vclosed) & (Xcmd_in = Vlow)) -> (next(mode) in (Vlow-flow union fault_modes)))TRANS (((mode = Vclosed) & !((Xcmd_in = Vhigh) | (Xcmd_in = Vlow))) -> (next(mode) in (Vclosed union fault_modes)))TRANS ((mode = Vstuck-closed) -> (next(mode) in (Vstuck-closed union fault_modes)))TRANS ((mode = Vstuck-open) -> (next(mode) in (Vstuck-open union fault_modes)))TRANS ((mode = Vpartially-open) -> (next(mode) in (Vpartially-open union fault_modes)))TRANS ((mode = Vunknown-valve-fault) -> (next(mode) in (Vunknown-valve-fault union fault_modes)))INVAR ((mode = Vhigh-flow) -> (Xadmittance = Vhigh))INVAR ((mode = Vlow-flow) -> (Xadmittance = Vlow))INVAR ((mode = Vclosed) -> (Xadmittance = Voff))INVAR ((mode = Vstuck-closed) -> (Xadmittance = Voff))INVAR ((mode = Vstuck-open) -> (Xadmittance = Vhigh))INVAR ((mode = Vpartially-open) -> (Xadmittance = Vlow))MODULE Mflow-measurement VAR  Xflowrate : {Voff, Vlow, Vhigh};  Xmeasured_flow : {Voff, Vlow, Vhigh};  mode : {Vnominal, Vflow-meas-fault};DEFINE  fault_modes := {Vflow-meas-fault};  broken := (mode in fault_modes);  brokencount := broken;INIT (mode = Vnominal)TRANS ((mode = Vnominal) -> (next(mode) in (Vnominal union fault_modes)))TRANS ((mode = Vflow-meas-fault) -> (next(mode) = Vflow-meas-fault))INVAR ((mode = Vnominal) -> (Xflowrate = Xmeasured_flow))MODULE Mmass-flow VAR  Xflow : {Voff, Vlow, Vhigh};  Xadmittance : {Voff, Vlow, Vhigh};  Xbranch1-admit : {Voff, Vlow, Vhigh};  Xbranch2-admit : {Voff, Vlow, Vhigh};-- STRUCTURE  Xcontrol_1 : Mflow-control-valve;  Xcontrol_2 : Mflow-control-valve;  Xsens_1 : Mflow-measurement;  Xsens_2 : Mflow-measurement;  Xshut_off_1 : Mlatching-solenoid-valve;  Xshut_off_2 : Mlatching-solenoid-valve;DEFINE  broken := (Xshut_off_2.broken | Xshut_off_1.broken | Xsens_2.broken | Xsens_1.broken | Xcontrol_2.broken | Xcontrol_1.broken);  brokencount := (Xshut_off_2.brokencount + Xshut_off_1.brokencount + Xsens_2.brokencount + Xsens_1.brokencount + Xcontrol_2.brokencount + Xcontrol_1.brokencount);INVAR ((Xflow = Voff) -> ((Xsens_1.Xflowrate = Voff) & (Xsens_2.Xflowrate = Voff)))INVAR (!(Xflow = Voff) -> (((Xflow = Vlow) -> (((((Xbranch1-admit = Vlow) & (Xbranch2-admit = Vlow)) | ((Xbranch1-admit = Vhigh) & (Xbranch2-admit = Vhigh))) -> ((Xsens_1.Xflowrate = Vlow) & (Xsens_2.Xflowrate = Vlow))) & (!(((Xbranch1-admit = Vlow) & (Xbranch2-admit = Vlow)) | ((Xbranch1-admit = Vhigh) & (Xbranch2-admit = Vhigh))) -> ((((Xbranch1-admit = Voff) | ((Xbranch1-admit = Vlow) & (Xbranch2-admit = Vhigh))) -> ((Xsens_1.Xflowrate = Voff) & (Xsens_2.Xflowrate = Vlow))) & (!((Xbranch1-admit = Voff) | ((Xbranch1-admit = Vlow) & (Xbranch2-admit = Vhigh))) -> ((Xsens_1.Xflowrate = Vlow) & (Xsens_2.Xflowrate = Voff))))))) & (!(Xflow = Vlow) -> ((((Xbranch1-admit = Vhigh) & (Xbranch2-admit = Vhigh)) -> ((Xsens_1.Xflowrate = Vhigh) & (Xsens_2.Xflowrate = Vhigh))) & (!((Xbranch1-admit = Vhigh) & (Xbranch2-admit = Vhigh)) -> ((((Xbranch1-admit = Vlow) | (Xbranch1-admit = Voff)) -> ((Xsens_1.Xflowrate = Voff) & (Xsens_2.Xflowrate = Vhigh))) & (!((Xbranch1-admit = Vlow) | (Xbranch1-admit = Voff)) -> ((Xsens_1.Xflowrate = Vhigh) & (Xsens_2.Xflowrate = Voff)))))))))INVAR (((Xbranch1-admit = Voff) & (Xbranch2-admit = Voff)) -> (Xadmittance = Voff))INVAR (!((Xbranch1-admit = Voff) & (Xbranch2-admit = Voff)) -> ((((Xbranch1-admit = Vhigh) | (Xbranch2-admit = Vhigh)) -> (Xadmittance = Vhigh)) & (!((Xbranch1-admit = Vhigh) | (Xbranch2-admit = Vhigh)) -> (Xadmittance = Vlow))))INVAR (((Xcontrol_2.Xadmittance = Voff) | (Xshut_off_2.Xadmittance = Voff)) -> (Xbranch2-admit = Voff))INVAR (!((Xcontrol_2.Xadmittance = Voff) | (Xshut_off_2.Xadmittance = Voff)) -> ((((Xcontrol_2.Xadmittance = Vhigh) & (Xshut_off_2.Xadmittance = Vhigh)) -> (Xbranch2-admit = Vhigh)) & (!((Xcontrol_2.Xadmittance = Vhigh) & (Xshut_off_2.Xadmittance = Vhigh)) -> (Xbranch2-admit = Vlow))))INVAR (((Xcontrol_1.Xadmittance = Voff) | (Xshut_off_1.Xadmittance = Voff)) -> (Xbranch1-admit = Voff))INVAR (!((Xcontrol_1.Xadmittance = Voff) | (Xshut_off_1.Xadmittance = Voff)) -> ((((Xcontrol_1.Xadmittance = Vhigh) & (Xshut_off_1.Xadmittance = Vhigh)) -> (Xbranch1-admit = Vhigh)) & (!((Xcontrol_1.Xadmittance = Vhigh) & (Xshut_off_1.Xadmittance = Vhigh)) -> (Xbranch1-admit = Vlow))))MODULE Mzirc-flow-branch VAR  Xflow : {Voff, Vlow, Vhigh};  Xadmittance : {Voff, Vlow, Vhigh};-- STRUCTURE  Xz_valve_module : Mzirc-valve-module;  Xz_flow_module : Mmass-flow;DEFINE  broken := (Xz_flow_module.broken | Xz_valve_module.broken);  brokencount := (Xz_flow_module.brokencount + Xz_valve_module.brokencount);INVAR (Xflow = Xz_flow_module.Xflow)INVAR (Xz_valve_module.Xflow = Xz_flow_module.Xflow)INVAR (((Xz_valve_module.Xadmittance = Voff) | (Xz_flow_module.Xadmittance = Voff)) -> (Xadmittance = Voff))INVAR (!((Xz_valve_module.Xadmittance = Voff) | (Xz_flow_module.Xadmittance = Voff)) -> ((((Xz_valve_module.Xadmittance = Vhigh) & (Xz_flow_module.Xadmittance = Vhigh)) -> (Xadmittance = Vhigh)) & (!((Xz_valve_module.Xadmittance = Vhigh) & (Xz_flow_module.Xadmittance = Vhigh)) -> (Xadmittance = Vlow))))MODULE Mmixer VAR  Xco2_inflow : {Voff, Vlow, Vhigh};  Xh2_inflow : {Voff, Vlow, Vhigh};  Xadmittance : {Voff, Vlow, Vhigh};  Xh2_outflow : {Voff, Vlow, Vhigh};  Xco2_outflow : {Voff, Vlow, Vhigh};  mode : {Vnominal_operation, Vmixer-fault};DEFINE  fault_modes := {Vmixer-fault};  broken := (mode in fault_modes);  brokencount := broken;INIT (mode = Vnominal_operation) -- Force component to start in a nominal modeTRANS ((mode = Vnominal_operation) -> (next(mode) in (Vnominal_operation union fault_modes)))TRANS ((mode = Vmixer-fault) -> (next(mode) = Vmixer-fault))TRANS (((mode = Vmixer-fault) & !1) -> (next(mode) = Vmixer-fault))INVAR ((mode = Vnominal_operation) -> ((Xadmittance = Vhigh) & (Xh2_inflow = Xh2_outflow) & (Xco2_inflow = Xco2_outflow)))MODULE Msabatier-heater VAR  Xcmd_in : {Von, Voff, Vno-command};  Xheat_out : {Von, Voff};  mode : {Von, Voff, Vheater-fault};DEFINE  fault_modes := {Vheater-fault};  broken := (mode in fault_modes);  brokencount := broken;INIT (mode = Voff)TRANS (((mode = Von) & (Xcmd_in = Voff)) -> (next(mode) in (Voff union fault_modes)))TRANS (((mode = Von) & !(Xcmd_in = Voff)) -> (next(mode) in (Von union fault_modes)))TRANS (((mode = Voff) & (Xcmd_in = Von)) -> (next(mode) in (Von union fault_modes)))TRANS (((mode = Voff) & !(Xcmd_in = Von)) -> (next(mode) in (Voff union fault_modes)))TRANS ((mode = Vheater-fault) -> (next(mode) = Vheater-fault))INVAR ((mode = Von) -> (Xheat_out = Von))INVAR ((mode = Voff) -> (Xheat_out = Voff))MODULE Mtemperature-sensor VAR  Xsensed_temp : {Vlow, Vnominal};  Xreported_temp : {Vlow, Vnominal};  mode : {Vnominal, Vtemp-sensor-fault};DEFINE  fault_modes := {Vtemp-sensor-fault};  broken := (mode in fault_modes);  brokencount := broken;INIT (mode = Vnominal)TRANS ((mode = Vnominal) -> (next(mode) in (Vnominal union fault_modes)))TRANS ((mode = Vtemp-sensor-fault) -> (next(mode) = Vtemp-sensor-fault))INVAR ((mode = Vnominal) -> (Xsensed_temp = Xreported_temp))MODULE Mpressure-sensor VAR  Xsensed_press : {Vhigh, Vlow};  Xreported_press : {Vhigh, Vlow};  mode : {Vnominal, Vpress-sensor-fault};DEFINE  fault_modes := {Vpress-sensor-fault};  broken := (mode in fault_modes);  brokencount := broken;INIT (mode = Vnominal)TRANS ((mode = Vnominal) -> (next(mode) in (Vnominal union fault_modes)))TRANS ((mode = Vpress-sensor-fault) -> (next(mode) = Vpress-sensor-fault))INVAR ((mode = Vnominal) -> (Xsensed_press = Xreported_press))MODULE Mgas-flow-sensor VAR  Xsensed_flow : {Voff, Vlow, Vhigh};  Xreported_flow : {Voff, Vlow, Vhigh};  mode : {Vnominal, Vgas-sensor-fault};DEFINE  fault_modes := {Vgas-sensor-fault};  broken := (mode in fault_modes);  brokencount := broken;INIT (mode = Vnominal)TRANS ((mode = Vnominal) -> (next(mode) in (Vnominal union fault_modes)))TRANS ((mode = Vgas-sensor-fault) -> (next(mode) = Vgas-sensor-fault))INVAR ((mode = Vnominal) -> (Xsensed_flow = Xreported_flow))MODULE Msabatier-reactor VAR  Xheat_in : {Von, Voff};  Xco2_inflow : {Voff, Vlow, Vhigh};  Xh2_inflow : {Voff, Vlow, Vhigh};  Xadmittance : {Voff, Vlow, Vhigh};  Xh2_outflow : {Voff, Vlow, Vhigh};  Xco2_outflow : {Voff, Vlow, Vhigh};  Xh2o_outflow : {Voff, Vlow, Vhigh};  Xch4_outflow : {Voff, Vlow, Vhigh};  Xpreheat : {Vachieved, Vrequired};  Xtemp_internal : {Vlow, Vnominal};  Xtemp_inlet : {Vlow, Vnominal};  Xtemp_outlet : {Vlow, Vnominal};  Xpress_internal : {Vhigh, Vlow};  mode : {Vnominal_operation, Vdegraded-catalyst, Vsabatier-fault};DEFINE  fault_modes := {Vdegraded-catalyst, Vsabatier-fault};  broken := (mode in fault_modes);  brokencount := broken;INIT (mode = Vnominal_operation)INIT (Xpreheat = Vrequired)TRANS ((mode = Vnominal_operation) -> (next(mode) in (Vnominal_operation union fault_modes)))TRANS ((mode = Vdegraded-catalyst) -> (next(mode) in (Vdegraded-catalyst union fault_modes)))TRANS (((mode = Vdegraded-catalyst) & !1) -> (next(mode) in (Vdegraded-catalyst union fault_modes)))TRANS ((mode = Vsabatier-fault) -> (next(mode) in (Vsabatier-fault union fault_modes)))TRANS (((mode = Vsabatier-fault) & !1) -> (next(mode) in (Vsabatier-fault union fault_modes)))INVAR ((Xheat_in = Von) -> (Xtemp_internal = Vnominal))INVAR (!(Xheat_in = Von) -> (Xtemp_internal = Vlow))TRANS ((Xtemp_internal = Vnominal) -> (next(Xpreheat) = Vachieved))TRANS (!(Xtemp_internal = Vnominal) -> (next(Xpreheat) = Vrequired))INVAR ((mode = Vnominal_operation) -> ((Xadmittance = Vhigh) & ((((Xtemp_internal = Vlow) | (Xco2_inflow = Voff) | (Xh2_inflow = Voff)) -> ((Xh2_inflow = Xh2_outflow) & (Xco2_inflow = Xco2_outflow) & (Xh2o_outflow = Voff) & (Xch4_outflow = Voff))) & (!((Xtemp_internal = Vlow) | (Xco2_inflow = Voff) | (Xh2_inflow = Voff)) -> (((((Xco2_inflow = Vlow) & (Xh2_inflow = Vlow)) | ((Xco2_inflow = Vhigh) & (Xh2_inflow = Vhigh))) -> ((Xh2_inflow = Xh2o_outflow) & (Xh2_inflow = Xch4_outflow) & (Xh2_outflow = Voff) & (Xco2_outflow = Voff))) & (!(((Xco2_inflow = Vlow) & (Xh2_inflow = Vlow)) | ((Xco2_inflow = Vhigh) & (Xh2_inflow = Vhigh))) -> ((((Xco2_inflow = Vlow) & (Xh2_inflow = Vhigh)) -> ((Xco2_outflow = Voff) & !(Xh2_outflow = Voff) & (Xh2o_outflow = Vlow) & (Xch4_outflow = Vlow))) & (!((Xco2_inflow = Vlow) & (Xh2_inflow = Vhigh)) -> (!(Xco2_outflow = Voff) & (Xh2_outflow = Voff) & (Xh2o_outflow = Vlow) & (Xch4_outflow = Vlow))))))))))INVAR ((mode = Vdegraded-catalyst) -> ((Xtemp_internal = Vnominal) & (((Xco2_inflow = Vlow) & (Xh2_inflow = Vlow) & (Xh2_outflow = Vlow) & (Xco2_outflow = Vlow)) | ((Xco2_inflow = Vhigh) & (Xh2_inflow = Vhigh) & (((Xh2_outflow = Vlow) & (Xco2_outflow = Vlow)) | ((Xh2_outflow = Vhigh) & (Xco2_outflow = Vhigh)))))))MODULE Msabatier-and-components VAR  Xco2_inflow : {Voff, Vlow, Vhigh};  Xh2_inflow : {Voff, Vlow, Vhigh};  Xadmittance : {Voff, Vlow, Vhigh};  Xh2_outflow : {Voff, Vlow, Vhigh};  Xco2_outflow : {Voff, Vlow, Vhigh};  Xh2o_outflow : {Voff, Vlow, Vhigh};  Xch4_outflow : {Voff, Vlow, Vhigh};-- STRUCTURE  Xheater_a : Msabatier-heater;  Xheater_b : Msabatier-heater;  Xinternal_temp : Mtemperature-sensor;  Xinlet_temp : Mtemperature-sensor;  Xoutlet_temp : Mtemperature-sensor;  Xpressure : Mpressure-sensor;  Xco2_sensor : Mgas-flow-sensor;  Xh2_sensor : Mgas-flow-sensor;  Xreactor : Msabatier-reactor;DEFINE  broken := (Xreactor.broken | Xh2_sensor.broken | Xco2_sensor.broken | Xpressure.broken | Xoutlet_temp.broken | Xinlet_temp.broken | Xinternal_temp.broken | Xheater_b.broken | Xheater_a.broken);  brokencount := (Xreactor.brokencount + Xh2_sensor.brokencount + Xco2_sensor.brokencount + Xpressure.brokencount + Xoutlet_temp.brokencount + Xinlet_temp.brokencount + Xinternal_temp.brokencount + Xheater_b.brokencount + Xheater_a.brokencount);INVAR (((Xheater_a.Xheat_out = Von) | (Xheater_b.Xheat_out = Von)) -> (Xreactor.Xheat_in = Von))INVAR (!((Xheater_a.Xheat_out = Von) | (Xheater_b.Xheat_out = Von)) -> (Xreactor.Xheat_in = Voff))INVAR (Xreactor.Xpress_internal = Xpressure.Xsensed_press)INVAR (Xreactor.Xtemp_outlet = Xoutlet_temp.Xsensed_temp)INVAR (Xreactor.Xtemp_inlet = Xinlet_temp.Xsensed_temp)INVAR (Xreactor.Xadmittance = Xadmittance)INVAR (Xreactor.Xh2_inflow = Xh2_inflow)INVAR (Xreactor.Xco2_inflow = Xco2_inflow)INVAR (Xreactor.Xh2o_outflow = Xh2o_outflow)INVAR (Xreactor.Xch4_outflow = Xch4_outflow)INVAR (Xreactor.Xh2_outflow = Xh2_outflow)INVAR (Xreactor.Xco2_outflow = Xco2_outflow)INVAR (Xreactor.Xh2_outflow = Xh2_sensor.Xsensed_flow)INVAR (Xreactor.Xco2_outflow = Xco2_sensor.Xsensed_flow)INVAR (Xreactor.Xtemp_internal = Xinternal_temp.Xsensed_temp)MODULE Mpressure-source VAR  Xcmd_in : {Von, Voff, Vno-command};  Xdriving_force : {Von, Voff};  Xflow_out : {Voff, Vlow, Vhigh};  mode : {Von, Voff, Vunknown-pressure-source-fault};DEFINE  fault_modes := {Vunknown-pressure-source-fault};  broken := (mode in fault_modes);  brokencount := broken;INIT (mode = Voff)TRANS (((mode = Von) & (Xcmd_in = Voff)) -> (next(mode) in (Voff union fault_modes)))TRANS (((mode = Von) & !(Xcmd_in = Voff)) -> (next(mode) in (Von union fault_modes)))TRANS (((mode = Voff) & (Xcmd_in = Von)) -> (next(mode) in (Von union fault_modes)))TRANS (((mode = Voff) & !(Xcmd_in = Von)) -> (next(mode) in (Voff union fault_modes)))TRANS ((mode = Vunknown-pressure-source-fault) -> (next(mode) = Vunknown-pressure-source-fault))INVAR ((mode = Von) -> ((Xdriving_force = Von) & ((Xflow_out = Vlow) | (Xflow_out = Vhigh))))INVAR ((mode = Voff) -> ((Xdriving_force = Voff) & (Xflow_out = Voff)))MODULE Msabatier-flow-branch VAR  Xflow : {Voff, Vlow, Vhigh};  Xadmittance : {Voff, Vlow, Vhigh};  Xmixer_sabatier_admit : {Voff, Vlow, Vhigh};-- STRUCTURE  Xco2_h2_mixer : Mmixer;  Xsabatier : Msabatier-and-components;  Xs_flow_module : Mmass-flow;  Xh2_source : Mpressure-source;DEFINE  broken := (Xh2_source.broken | Xs_flow_module.broken | Xsabatier.broken | Xco2_h2_mixer.broken);  brokencount := (Xh2_source.brokencount + Xs_flow_module.brokencount + Xsabatier.brokencount + Xco2_h2_mixer.brokencount);INVAR (Xflow = Xs_flow_module.Xflow)INVAR (Xco2_h2_mixer.Xco2_outflow = Xsabatier.Xco2_inflow)INVAR (Xs_flow_module.Xflow = Xco2_h2_mixer.Xco2_inflow)INVAR (Xco2_h2_mixer.Xh2_outflow = Xsabatier.Xh2_inflow)INVAR (Xh2_source.Xflow_out = Xco2_h2_mixer.Xh2_inflow)INVAR (((Xco2_h2_mixer.Xadmittance = Voff) | (Xsabatier.Xadmittance = Voff)) -> (Xmixer_sabatier_admit = Voff))INVAR (!((Xco2_h2_mixer.Xadmittance = Voff) | (Xsabatier.Xadmittance = Voff)) -> ((((Xco2_h2_mixer.Xadmittance = Vhigh) & (Xsabatier.Xadmittance = Vhigh)) -> (Xmixer_sabatier_admit = Vhigh)) & (!((Xco2_h2_mixer.Xadmittance = Vhigh) & (Xsabatier.Xadmittance = Vhigh)) -> (Xmixer_sabatier_admit = Vlow))))INVAR (((Xs_flow_module.Xadmittance = Voff) | (Xmixer_sabatier_admit = Voff)) -> (Xadmittance = Voff))INVAR (!((Xs_flow_module.Xadmittance = Voff) | (Xmixer_sabatier_admit = Voff)) -> ((((Xs_flow_module.Xadmittance = Vhigh) & (Xmixer_sabatier_admit = Vhigh)) -> (Xadmittance = Vhigh)) & (!((Xs_flow_module.Xadmittance = Vhigh) & (Xmixer_sabatier_admit = Vhigh)) -> (Xadmittance = Vlow))))MODULE Mflow-branch VAR  Xflow : {Voff, Vlow, Vhigh};  Xadmittance : {Voff, Vlow, Vhigh};  Xzirc-sabatier : {Voff, Vlow, Vhigh};-- STRUCTURE  Xoutlet : Mvalve-mod;  Xzirconia-branch : Mzirc-flow-branch;  Xsabatier-branch : Msabatier-flow-branch;DEFINE  broken := (Xsabatier-branch.broken | Xzirconia-branch.broken | Xoutlet.broken);  brokencount := (Xsabatier-branch.brokencount + Xzirconia-branch.brokencount + Xoutlet.brokencount);INVAR (Xoutlet.Xflow = Xflow)INVAR ((Xflow = Voff) -> ((Xsabatier-branch.Xflow = Voff) & (Xzirconia-branch.Xflow = Voff)))INVAR (!(Xflow = Voff) -> (((Xflow = Vlow) -> (((((Xsabatier-branch.Xadmittance = Vlow) & (Xzirconia-branch.Xadmittance = Vlow)) | ((Xsabatier-branch.Xadmittance = Vhigh) & (Xzirconia-branch.Xadmittance = Vhigh))) -> ((Xsabatier-branch.Xflow = Vlow) & (Xzirconia-branch.Xflow = Vlow))) & (!(((Xsabatier-branch.Xadmittance = Vlow) & (Xzirconia-branch.Xadmittance = Vlow)) | ((Xsabatier-branch.Xadmittance = Vhigh) & (Xzirconia-branch.Xadmittance = Vhigh))) -> ((((Xsabatier-branch.Xadmittance = Voff) | ((Xsabatier-branch.Xadmittance = Vlow) & (Xzirconia-branch.Xadmittance = Vhigh))) -> ((Xsabatier-branch.Xflow = Voff) & (Xzirconia-branch.Xflow = Vlow))) & (!((Xsabatier-branch.Xadmittance = Voff) | ((Xsabatier-branch.Xadmittance = Vlow) & (Xzirconia-branch.Xadmittance = Vhigh))) -> ((Xsabatier-branch.Xflow = Vlow) & (Xzirconia-branch.Xflow = Voff))))))) & (!(Xflow = Vlow) -> ((((Xsabatier-branch.Xadmittance = Vhigh) & (Xzirconia-branch.Xadmittance = Vhigh)) -> ((Xsabatier-branch.Xflow = Vhigh) & (Xzirconia-branch.Xflow = Vhigh))) & (!((Xsabatier-branch.Xadmittance = Vhigh) & (Xzirconia-branch.Xadmittance = Vhigh)) -> ((((Xsabatier-branch.Xadmittance = Vlow) | (Xsabatier-branch.Xadmittance = Voff)) -> ((Xsabatier-branch.Xflow = Voff) & (Xzirconia-branch.Xflow = Vhigh))) & (!((Xsabatier-branch.Xadmittance = Vlow) | (Xsabatier-branch.Xadmittance = Voff)) -> ((Xsabatier-branch.Xflow = Vhigh) & (Xzirconia-branch.Xflow = Voff)))))))))INVAR (((Xsabatier-branch.Xadmittance = Voff) & (Xzirconia-branch.Xadmittance = Voff)) -> (Xzirc-sabatier = Voff))INVAR (!((Xsabatier-branch.Xadmittance = Voff) & (Xzirconia-branch.Xadmittance = Voff)) -> ((((Xsabatier-branch.Xadmittance = Vhigh) | (Xzirconia-branch.Xadmittance = Vhigh)) -> (Xzirc-sabatier = Vhigh)) & (!((Xsabatier-branch.Xadmittance = Vhigh) | (Xzirconia-branch.Xadmittance = Vhigh)) -> (Xzirc-sabatier = Vlow))))INVAR (((Xoutlet.Xadmittance = Voff) | (Xzirc-sabatier = Voff)) -> (Xadmittance = Voff))INVAR (!((Xoutlet.Xadmittance = Voff) | (Xzirc-sabatier = Voff)) -> ((((Xoutlet.Xadmittance = Vhigh) & (Xzirc-sabatier = Vhigh)) -> (Xadmittance = Vhigh)) & (!((Xoutlet.Xadmittance = Vhigh) & (Xzirc-sabatier = Vhigh)) -> (Xadmittance = Vlow))))MODULE Mheater VAR  Xcmd_in : {Von, Voff, Vno-command};  mode : {Von, Voff, Vheater-fault};DEFINE  fault_modes := {Vheater-fault};  broken := (mode in fault_modes);  brokencount := broken;INIT (mode = Voff)TRANS (((mode = Von) & (Xcmd_in = Voff)) -> (next(mode) in (Voff union fault_modes)))TRANS (((mode = Von) & !(Xcmd_in = Voff)) -> (next(mode) in (Von union fault_modes)))TRANS (((mode = Voff) & (Xcmd_in = Von)) -> (next(mode) in (Von union fault_modes)))TRANS (((mode = Voff) & !(Xcmd_in = Von)) -> (next(mode) in (Voff union fault_modes)))TRANS ((mode = Vheater-fault) -> (next(mode) = Vheater-fault))MODULE Msorption-pump VAR  Xprocess-coef : {Voff, Vlow, Vhigh};  Xsorpressure : {Vhigh, Vlow};  Xheat : {Vlow, Vnominal};  Xsorplevel : {Vempty, Vfull};  Xdsorplevel : {Vincreasing, Vdecreasing, Vneutral};  Xpumpflowcoef : {Voff, Vlow, Vhigh};-- STRUCTURE  Xinlet : Mvalve-mod;  Xvent : Mvalve-mod;  Xheater_a : Mheater;  Xheater_b : Mheater;DEFINE  broken := (Xheater_b.broken | Xheater_a.broken | Xvent.broken | Xinlet.broken);  brokencount := (Xheater_b.brokencount + Xheater_a.brokencount + Xvent.brokencount + Xinlet.brokencount);INVAR (Xsorplevel = Vfull)INVAR !(Xdsorplevel = Vincreasing)INVAR ((Xpumpflowcoef = Voff) -> (Xdsorplevel = Vneutral))INVAR (((Xheat = Vnominal) & !(Xpumpflowcoef = Voff) & !(Xsorplevel = Vempty)) -> (Xdsorplevel = Vdecreasing))INVAR (((Xheat = Vnominal) & !(Xsorplevel = Vempty)) -> (Xsorpressure = Vhigh))INVAR (!((Xheat = Vnominal) & !(Xsorplevel = Vempty)) -> (Xsorpressure = Vlow))INVAR (((Xinlet.Xadmittance = Voff) & (Xvent.Xadmittance = Voff) & (Xprocess-coef = Voff)) -> (Xpumpflowcoef = Voff))INVAR (!((Xinlet.Xadmittance = Voff) & (Xvent.Xadmittance = Voff) & (Xprocess-coef = Voff)) -> ((((Xinlet.Xadmittance = Vhigh) | (Xvent.Xadmittance = Vhigh) | (Xprocess-coef = Vhigh)) -> (Xpumpflowcoef = Vhigh)) & (!((Xinlet.Xadmittance = Vhigh) | (Xvent.Xadmittance = Vhigh) | (Xprocess-coef = Vhigh)) -> (Xpumpflowcoef = Vlow))))INVAR (((Xheater_a.mode = Von) | (Xheater_b.mode = Von)) -> (Xheat = Vnominal))MODULE Mispp VAR-- STRUCTURE  Xprocess : Mflow-branch;  Xspump : Msorption-pump;DEFINE  broken := (Xspump.broken | Xprocess.broken);  brokencount := (Xspump.brokencount + Xprocess.brokencount);INVAR ((Xspump.Xsorpressure = Vlow) -> (Xprocess.Xflow = Voff))INVAR (!(Xspump.Xsorpressure = Vlow) -> (((Xprocess.Xadmittance = Vhigh) -> (Xprocess.Xflow = Vhigh)) & (!(Xprocess.Xadmittance = Vhigh) -> (((Xprocess.Xadmittance = Vlow) -> (Xprocess.Xflow = Vlow)) & (!(Xprocess.Xadmittance = Vlow) -> (Xprocess.Xflow = Voff))))))INVAR (Xprocess.Xadmittance = Xspump.Xprocess-coef)MODULE mainVAR-- STRUCTURE  Xispp : Mispp;DEFINE  broken := Xispp.broken;  brokencount := Xispp.brokencount;SPEC  AG ((Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_1.mode = Vclosed) -> !(((Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_1.Xcmd_in = Vhigh) & (Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_1.Xcmd_in = Vlow))))SPEC  AG ((Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_1.mode = Vlow-flow) -> !(((Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_1.Xcmd_in = Voff) & (Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_1.Xcmd_in = Vhigh))))SPEC  AG ((Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_1.mode = Vhigh-flow) -> !(((Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_1.Xcmd_in = Voff) & (Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_1.Xcmd_in = Vlow))))SPEC  AG ((Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_2.mode = Vclosed) -> !(((Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_2.Xcmd_in = Vhigh) & (Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_2.Xcmd_in = Vlow))))SPEC  AG ((Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_2.mode = Vlow-flow) -> !(((Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_2.Xcmd_in = Voff) & (Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_2.Xcmd_in = Vhigh))))SPEC  AG ((Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_2.mode = Vhigh-flow) -> !(((Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_2.Xcmd_in = Voff) & (Xispp.Xprocess.Xzirconia-branch.Xz_flow_module.Xcontrol_2.Xcmd_in = Vlow))))SPEC  AG ((Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_1.mode = Vclosed) -> !(((Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_1.Xcmd_in = Vhigh) & (Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_1.Xcmd_in = Vlow))))SPEC  AG ((Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_1.mode = Vlow-flow) -> !(((Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_1.Xcmd_in = Voff) & (Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_1.Xcmd_in = Vhigh))))SPEC  AG ((Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_1.mode = Vhigh-flow) -> !(((Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_1.Xcmd_in = Voff) & (Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_1.Xcmd_in = Vlow))))SPEC  AG ((Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_2.mode = Vclosed) -> !(((Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_2.Xcmd_in = Vhigh) & (Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_2.Xcmd_in = Vlow))))SPEC  AG ((Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_2.mode = Vlow-flow) -> !(((Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_2.Xcmd_in = Voff) & (Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_2.Xcmd_in = Vhigh))))SPEC  AG ((Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_2.mode = Vhigh-flow) -> !(((Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_2.Xcmd_in = Voff) & (Xispp.Xprocess.Xsabatier-branch.Xs_flow_module.Xcontrol_2.Xcmd_in = Vlow))))SPEC  AG (!broken -> EX !broken)SPEC  !E[!broken U (!broken & (Xispp.Xprocess.Xadmittance = Vhigh))]-- End of generation