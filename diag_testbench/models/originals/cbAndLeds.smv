-- Generated by JMPL2SMV [3.0.1 $Id: jmpl2smv.java,v 1.3 2001/11/07 02:17:59 taylor Exp $]MODULE testVAR cb10 : test_cb10;VAR cb9 : test_cb9;VAR led8 : test_led8;VAR led7 : test_led7;VAR led6 : test_led6;VAR led2 : test_led2;VAR cb2 : test_cb2;VAR led3 : test_led3;VAR cb3 : test_cb3;VAR led1 : test_led1;VAR cb1 : test_cb1;VAR cb6 : test_cb6;VAR cb7 : test_cb7;VAR cb8 : test_cb8;VAR cb12 : test_cb12;VAR cb14 : test_cb14;VAR source : test_source;VAR cb13 : test_cb13;VAR cb15 : test_cb15;VAR cb11 : test_cb11;VAR led5 : test_led5;VAR cb5 : test_cb5;VAR led4 : test_led4;VAR cb4 : test_cb4;--! sourceinfo specvariable TEST._BROKEN type test._brokenDEFINE _broken := cb10._broken | cb9._broken | led8._broken | led7._broken | led6._broken | led2._broken | cb2._broken | led3._broken | cb3._broken | led1._broken | cb1._broken | cb6._broken | cb7._broken | cb8._broken | cb12._broken | cb14._broken | source._broken | cb13._broken | cb15._broken | cb11._broken | led5._broken | cb5._broken | led4._broken | cb4._broken;--! sourceinfo specvariable TEST._BROKENCOUNT type test._brokencountDEFINE _brokenCount := cb10._brokenCount + cb9._brokenCount + led8._brokenCount + led7._brokenCount + led6._brokenCount + led2._brokenCount + cb2._brokenCount + led3._brokenCount + cb3._brokenCount + led1._brokenCount + cb1._brokenCount + cb6._brokenCount + cb7._brokenCount + cb8._brokenCount + cb12._brokenCount + cb14._brokenCount + source._brokenCount + cb13._brokenCount + cb15._brokenCount + cb11._brokenCount + led5._brokenCount + cb5._brokenCount + led4._brokenCount + cb4._brokenCount;--! sourceinfo specvariable TEST._BROKENPROB type test._brokenProbDEFINE _brokenProb := cb10._brokenProb + cb9._brokenProb + led8._brokenProb + led7._brokenProb + led6._brokenProb + led2._brokenProb + cb2._brokenProb + led3._brokenProb + cb3._brokenProb + led1._brokenProb + cb1._brokenProb + cb6._brokenProb + cb7._brokenProb + cb8._brokenProb + cb12._brokenProb + cb14._brokenProb + source._brokenProb + cb13._brokenProb + cb15._brokenProb + cb11._brokenProb + led5._brokenProb + cb5._brokenProb + led4._brokenProb + cb4._brokenProb;--! sourceinfo specvariable TEST._FAILED type test._failedDEFINE _failed := cb10._failed | cb9._failed | led8._failed | led7._failed | led6._failed | led2._failed | cb2._failed | led3._failed | cb3._failed | led1._failed | cb1._failed | cb6._failed | cb7._failed | cb8._failed | cb12._failed | cb14._failed | source._failed | cb13._failed | cb15._failed | cb11._failed | led5._failed | cb5._failed | led4._failed | cb4._failed;--! sourceinfo specvariable TEST._FAILEDCOUNT type test._failedCountDEFINE _failedCount := cb10._failedCount + cb9._failedCount + led8._failedCount + led7._failedCount + led6._failedCount + led2._failedCount + cb2._failedCount + led3._failedCount + cb3._failedCount + led1._failedCount + cb1._failedCount + cb6._failedCount + cb7._failedCount + cb8._failedCount + cb12._failedCount + cb14._failedCount + source._failedCount + cb13._failedCount + cb15._failedCount + cb11._failedCount + led5._failedCount + cb5._failedCount + led4._failedCount + cb4._failedCount;INVAR (cb4.currentOut = led4.currentIn)INVAR (cb5.currentOut = led5.currentIn)INVAR (cb11.currentOut = cb5.currentIn)INVAR (cb15.currentOut = cb13.currentIn)INVAR (source.currentOut = cb15.currentIn)INVAR (cb14.currentOut = cb12.currentIn)INVAR (cb14.currentOut = cb11.currentIn)INVAR (cb15.currentOut = cb14.currentIn)INVAR (cb12.currentOut = cb8.currentIn)INVAR (cb12.currentOut = cb7.currentIn)INVAR (cb11.currentOut = cb6.currentIn)INVAR (cb1.currentOut = led1.currentIn)INVAR (cb3.currentOut = led3.currentIn)INVAR (cb2.currentOut = led2.currentIn)INVAR (cb6.currentOut = led6.currentIn)INVAR (cb7.currentOut = led7.currentIn)INVAR (cb8.currentOut = led8.currentIn)INVAR (cb9.currentOut = cb2.currentIn)INVAR (cb9.currentOut = cb1.currentIn)INVAR (cb13.currentOut = cb9.currentIn)INVAR (cb10.currentOut = cb3.currentIn)INVAR (cb10.currentOut = cb4.currentIn)INVAR (cb13.currentOut = cb10.currentIn)MODULE test_cb10VAR currentIn : {on,off};VAR currentOut : {on,off};VAR cmdIn : {on,off,reset,noCommand};VAR mode : {on,off,tripped,blown,unknownCbFault};VAR _last : {on,off,tripped,blown,unknownCbFault,fail_,otherwise_};INIT _last = otherwise_VAR _failed : boolean;INIT !_failedDEFINE _faultModes := {tripped, blown, unknownCbFault};DEFINE _broken := mode in _faultModes;DEFINE _brokenCount := _broken;DEFINE _brokenProb := case (mode = tripped) : 3; (mode = blown) : 4; (mode = unknownCbFault) : 4; 1 : 0; esac;DEFINE _failedCount := _failed;TRANS mode = off -> (!(cmdIn = on) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> (!(cmdIn = off) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> (!(cmdIn = reset) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> ((cmdIn = off) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = off -> ((cmdIn = on) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> ((cmdIn = reset) | (next(mode) = tripped & next(_last) = tripped & !next(_failed)) | (next(mode) in {blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = blown -> (next(mode) = blown & next(_last) = blown & !next(_failed) | (next(mode) in {tripped, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = unknownCbFault -> (next(mode) = unknownCbFault & next(_last) = unknownCbFault & !next(_failed) | (next(mode) in {tripped, blown} & next(_last) = fail_ & next(_failed)))INVAR !(mode = on) | (currentOut = currentIn)INVAR !(mode = off) | (currentOut = off)INVAR !(mode = tripped) | (currentOut = off)INVAR !(mode = blown) | (currentOut = off)MODULE test_cb9VAR currentIn : {on,off};VAR currentOut : {on,off};VAR cmdIn : {on,off,reset,noCommand};VAR mode : {on,off,tripped,blown,unknownCbFault};VAR _last : {on,off,tripped,blown,unknownCbFault,fail_,otherwise_};INIT _last = otherwise_VAR _failed : boolean;INIT !_failedDEFINE _faultModes := {tripped, blown, unknownCbFault};DEFINE _broken := mode in _faultModes;DEFINE _brokenCount := _broken;DEFINE _brokenProb := case (mode = tripped) : 3; (mode = blown) : 4; (mode = unknownCbFault) : 4; 1 : 0; esac;DEFINE _failedCount := _failed;TRANS mode = off -> (!(cmdIn = on) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> (!(cmdIn = off) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> (!(cmdIn = reset) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> ((cmdIn = off) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = off -> ((cmdIn = on) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> ((cmdIn = reset) | (next(mode) = tripped & next(_last) = tripped & !next(_failed)) | (next(mode) in {blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = blown -> (next(mode) = blown & next(_last) = blown & !next(_failed) | (next(mode) in {tripped, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = unknownCbFault -> (next(mode) = unknownCbFault & next(_last) = unknownCbFault & !next(_failed) | (next(mode) in {tripped, blown} & next(_last) = fail_ & next(_failed)))INVAR !(mode = on) | (currentOut = currentIn)INVAR !(mode = off) | (currentOut = off)INVAR !(mode = tripped) | (currentOut = off)INVAR !(mode = blown) | (currentOut = off)MODULE test_led8VAR currentIn : {on,off};VAR ledState : {on,off};VAR mode : {nominal};DEFINE _last := nominal;DEFINE _failed := 0;DEFINE _faultModes := 0;DEFINE _broken := 0;DEFINE _brokenCount := _broken;DEFINE _brokenProb := 0;DEFINE _failedCount := _failed;TRANS mode = nominal -> (next(mode) = nominal)INVAR !(mode = nominal) | (ledState = currentIn)MODULE test_led7VAR currentIn : {on,off};VAR ledState : {on,off};VAR mode : {nominal};DEFINE _last := nominal;DEFINE _failed := 0;DEFINE _faultModes := 0;DEFINE _broken := 0;DEFINE _brokenCount := _broken;DEFINE _brokenProb := 0;DEFINE _failedCount := _failed;TRANS mode = nominal -> (next(mode) = nominal)INVAR !(mode = nominal) | (ledState = currentIn)MODULE test_led6VAR currentIn : {on,off};VAR ledState : {on,off};VAR mode : {nominal};DEFINE _last := nominal;DEFINE _failed := 0;DEFINE _faultModes := 0;DEFINE _broken := 0;DEFINE _brokenCount := _broken;DEFINE _brokenProb := 0;DEFINE _failedCount := _failed;TRANS mode = nominal -> (next(mode) = nominal)INVAR !(mode = nominal) | (ledState = currentIn)MODULE test_led2VAR currentIn : {on,off};VAR ledState : {on,off};VAR mode : {nominal};DEFINE _last := nominal;DEFINE _failed := 0;DEFINE _faultModes := 0;DEFINE _broken := 0;DEFINE _brokenCount := _broken;DEFINE _brokenProb := 0;DEFINE _failedCount := _failed;TRANS mode = nominal -> (next(mode) = nominal)INVAR !(mode = nominal) | (ledState = currentIn)MODULE test_cb2VAR currentIn : {on,off};VAR currentOut : {on,off};VAR cmdIn : {on,off,reset,noCommand};VAR mode : {on,off,tripped,blown,unknownCbFault};VAR _last : {on,off,tripped,blown,unknownCbFault,fail_,otherwise_};INIT _last = otherwise_VAR _failed : boolean;INIT !_failedDEFINE _faultModes := {tripped, blown, unknownCbFault};DEFINE _broken := mode in _faultModes;DEFINE _brokenCount := _broken;DEFINE _brokenProb := case (mode = tripped) : 3; (mode = blown) : 4; (mode = unknownCbFault) : 4; 1 : 0; esac;DEFINE _failedCount := _failed;TRANS mode = off -> (!(cmdIn = on) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> (!(cmdIn = off) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> (!(cmdIn = reset) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> ((cmdIn = off) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = off -> ((cmdIn = on) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> ((cmdIn = reset) | (next(mode) = tripped & next(_last) = tripped & !next(_failed)) | (next(mode) in {blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = blown -> (next(mode) = blown & next(_last) = blown & !next(_failed) | (next(mode) in {tripped, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = unknownCbFault -> (next(mode) = unknownCbFault & next(_last) = unknownCbFault & !next(_failed) | (next(mode) in {tripped, blown} & next(_last) = fail_ & next(_failed)))INVAR !(mode = on) | (currentOut = currentIn)INVAR !(mode = off) | (currentOut = off)INVAR !(mode = tripped) | (currentOut = off)INVAR !(mode = blown) | (currentOut = off)MODULE test_led3VAR currentIn : {on,off};VAR ledState : {on,off};VAR mode : {nominal};DEFINE _last := nominal;DEFINE _failed := 0;DEFINE _faultModes := 0;DEFINE _broken := 0;DEFINE _brokenCount := _broken;DEFINE _brokenProb := 0;DEFINE _failedCount := _failed;TRANS mode = nominal -> (next(mode) = nominal)INVAR !(mode = nominal) | (ledState = currentIn)MODULE test_cb3VAR currentIn : {on,off};VAR currentOut : {on,off};VAR cmdIn : {on,off,reset,noCommand};VAR mode : {on,off,tripped,blown,unknownCbFault};VAR _last : {on,off,tripped,blown,unknownCbFault,fail_,otherwise_};INIT _last = otherwise_VAR _failed : boolean;INIT !_failedDEFINE _faultModes := {tripped, blown, unknownCbFault};DEFINE _broken := mode in _faultModes;DEFINE _brokenCount := _broken;DEFINE _brokenProb := case (mode = tripped) : 3; (mode = blown) : 4; (mode = unknownCbFault) : 4; 1 : 0; esac;DEFINE _failedCount := _failed;TRANS mode = off -> (!(cmdIn = on) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> (!(cmdIn = off) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> (!(cmdIn = reset) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> ((cmdIn = off) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = off -> ((cmdIn = on) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> ((cmdIn = reset) | (next(mode) = tripped & next(_last) = tripped & !next(_failed)) | (next(mode) in {blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = blown -> (next(mode) = blown & next(_last) = blown & !next(_failed) | (next(mode) in {tripped, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = unknownCbFault -> (next(mode) = unknownCbFault & next(_last) = unknownCbFault & !next(_failed) | (next(mode) in {tripped, blown} & next(_last) = fail_ & next(_failed)))INVAR !(mode = on) | (currentOut = currentIn)INVAR !(mode = off) | (currentOut = off)INVAR !(mode = tripped) | (currentOut = off)INVAR !(mode = blown) | (currentOut = off)MODULE test_led1VAR currentIn : {on,off};VAR ledState : {on,off};VAR mode : {nominal};DEFINE _last := nominal;DEFINE _failed := 0;DEFINE _faultModes := 0;DEFINE _broken := 0;DEFINE _brokenCount := _broken;DEFINE _brokenProb := 0;DEFINE _failedCount := _failed;TRANS mode = nominal -> (next(mode) = nominal)INVAR !(mode = nominal) | (ledState = currentIn)MODULE test_cb1VAR currentIn : {on,off};VAR currentOut : {on,off};VAR cmdIn : {on,off,reset,noCommand};VAR mode : {on,off,tripped,blown,unknownCbFault};VAR _last : {on,off,tripped,blown,unknownCbFault,fail_,otherwise_};INIT _last = otherwise_VAR _failed : boolean;INIT !_failedDEFINE _faultModes := {tripped, blown, unknownCbFault};DEFINE _broken := mode in _faultModes;DEFINE _brokenCount := _broken;DEFINE _brokenProb := case (mode = tripped) : 3; (mode = blown) : 4; (mode = unknownCbFault) : 4; 1 : 0; esac;DEFINE _failedCount := _failed;TRANS mode = off -> (!(cmdIn = on) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> (!(cmdIn = off) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> (!(cmdIn = reset) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> ((cmdIn = off) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = off -> ((cmdIn = on) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> ((cmdIn = reset) | (next(mode) = tripped & next(_last) = tripped & !next(_failed)) | (next(mode) in {blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = blown -> (next(mode) = blown & next(_last) = blown & !next(_failed) | (next(mode) in {tripped, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = unknownCbFault -> (next(mode) = unknownCbFault & next(_last) = unknownCbFault & !next(_failed) | (next(mode) in {tripped, blown} & next(_last) = fail_ & next(_failed)))INVAR !(mode = on) | (currentOut = currentIn)INVAR !(mode = off) | (currentOut = off)INVAR !(mode = tripped) | (currentOut = off)INVAR !(mode = blown) | (currentOut = off)MODULE test_cb6VAR currentIn : {on,off};VAR currentOut : {on,off};VAR cmdIn : {on,off,reset,noCommand};VAR mode : {on,off,tripped,blown,unknownCbFault};VAR _last : {on,off,tripped,blown,unknownCbFault,fail_,otherwise_};INIT _last = otherwise_VAR _failed : boolean;INIT !_failedDEFINE _faultModes := {tripped, blown, unknownCbFault};DEFINE _broken := mode in _faultModes;DEFINE _brokenCount := _broken;DEFINE _brokenProb := case (mode = tripped) : 3; (mode = blown) : 4; (mode = unknownCbFault) : 4; 1 : 0; esac;DEFINE _failedCount := _failed;TRANS mode = off -> (!(cmdIn = on) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> (!(cmdIn = off) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> (!(cmdIn = reset) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> ((cmdIn = off) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = off -> ((cmdIn = on) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> ((cmdIn = reset) | (next(mode) = tripped & next(_last) = tripped & !next(_failed)) | (next(mode) in {blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = blown -> (next(mode) = blown & next(_last) = blown & !next(_failed) | (next(mode) in {tripped, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = unknownCbFault -> (next(mode) = unknownCbFault & next(_last) = unknownCbFault & !next(_failed) | (next(mode) in {tripped, blown} & next(_last) = fail_ & next(_failed)))INVAR !(mode = on) | (currentOut = currentIn)INVAR !(mode = off) | (currentOut = off)INVAR !(mode = tripped) | (currentOut = off)INVAR !(mode = blown) | (currentOut = off)MODULE test_cb7VAR currentIn : {on,off};VAR currentOut : {on,off};VAR cmdIn : {on,off,reset,noCommand};VAR mode : {on,off,tripped,blown,unknownCbFault};VAR _last : {on,off,tripped,blown,unknownCbFault,fail_,otherwise_};INIT _last = otherwise_VAR _failed : boolean;INIT !_failedDEFINE _faultModes := {tripped, blown, unknownCbFault};DEFINE _broken := mode in _faultModes;DEFINE _brokenCount := _broken;DEFINE _brokenProb := case (mode = tripped) : 3; (mode = blown) : 4; (mode = unknownCbFault) : 4; 1 : 0; esac;DEFINE _failedCount := _failed;TRANS mode = off -> (!(cmdIn = on) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> (!(cmdIn = off) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> (!(cmdIn = reset) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> ((cmdIn = off) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = off -> ((cmdIn = on) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> ((cmdIn = reset) | (next(mode) = tripped & next(_last) = tripped & !next(_failed)) | (next(mode) in {blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = blown -> (next(mode) = blown & next(_last) = blown & !next(_failed) | (next(mode) in {tripped, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = unknownCbFault -> (next(mode) = unknownCbFault & next(_last) = unknownCbFault & !next(_failed) | (next(mode) in {tripped, blown} & next(_last) = fail_ & next(_failed)))INVAR !(mode = on) | (currentOut = currentIn)INVAR !(mode = off) | (currentOut = off)INVAR !(mode = tripped) | (currentOut = off)INVAR !(mode = blown) | (currentOut = off)MODULE test_cb8VAR currentIn : {on,off};VAR currentOut : {on,off};VAR cmdIn : {on,off,reset,noCommand};VAR mode : {on,off,tripped,blown,unknownCbFault};VAR _last : {on,off,tripped,blown,unknownCbFault,fail_,otherwise_};INIT _last = otherwise_VAR _failed : boolean;INIT !_failedDEFINE _faultModes := {tripped, blown, unknownCbFault};DEFINE _broken := mode in _faultModes;DEFINE _brokenCount := _broken;DEFINE _brokenProb := case (mode = tripped) : 3; (mode = blown) : 4; (mode = unknownCbFault) : 4; 1 : 0; esac;DEFINE _failedCount := _failed;TRANS mode = off -> (!(cmdIn = on) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> (!(cmdIn = off) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> (!(cmdIn = reset) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> ((cmdIn = off) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = off -> ((cmdIn = on) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> ((cmdIn = reset) | (next(mode) = tripped & next(_last) = tripped & !next(_failed)) | (next(mode) in {blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = blown -> (next(mode) = blown & next(_last) = blown & !next(_failed) | (next(mode) in {tripped, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = unknownCbFault -> (next(mode) = unknownCbFault & next(_last) = unknownCbFault & !next(_failed) | (next(mode) in {tripped, blown} & next(_last) = fail_ & next(_failed)))INVAR !(mode = on) | (currentOut = currentIn)INVAR !(mode = off) | (currentOut = off)INVAR !(mode = tripped) | (currentOut = off)INVAR !(mode = blown) | (currentOut = off)MODULE test_cb12VAR currentIn : {on,off};VAR currentOut : {on,off};VAR cmdIn : {on,off,reset,noCommand};VAR mode : {on,off,tripped,blown,unknownCbFault};VAR _last : {on,off,tripped,blown,unknownCbFault,fail_,otherwise_};INIT _last = otherwise_VAR _failed : boolean;INIT !_failedDEFINE _faultModes := {tripped, blown, unknownCbFault};DEFINE _broken := mode in _faultModes;DEFINE _brokenCount := _broken;DEFINE _brokenProb := case (mode = tripped) : 3; (mode = blown) : 4; (mode = unknownCbFault) : 4; 1 : 0; esac;DEFINE _failedCount := _failed;TRANS mode = off -> (!(cmdIn = on) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> (!(cmdIn = off) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> (!(cmdIn = reset) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> ((cmdIn = off) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = off -> ((cmdIn = on) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> ((cmdIn = reset) | (next(mode) = tripped & next(_last) = tripped & !next(_failed)) | (next(mode) in {blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = blown -> (next(mode) = blown & next(_last) = blown & !next(_failed) | (next(mode) in {tripped, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = unknownCbFault -> (next(mode) = unknownCbFault & next(_last) = unknownCbFault & !next(_failed) | (next(mode) in {tripped, blown} & next(_last) = fail_ & next(_failed)))INVAR !(mode = on) | (currentOut = currentIn)INVAR !(mode = off) | (currentOut = off)INVAR !(mode = tripped) | (currentOut = off)INVAR !(mode = blown) | (currentOut = off)MODULE test_cb14VAR currentIn : {on,off};VAR currentOut : {on,off};VAR cmdIn : {on,off,reset,noCommand};VAR mode : {on,off,tripped,blown,unknownCbFault};VAR _last : {on,off,tripped,blown,unknownCbFault,fail_,otherwise_};INIT _last = otherwise_VAR _failed : boolean;INIT !_failedDEFINE _faultModes := {tripped, blown, unknownCbFault};DEFINE _broken := mode in _faultModes;DEFINE _brokenCount := _broken;DEFINE _brokenProb := case (mode = tripped) : 3; (mode = blown) : 4; (mode = unknownCbFault) : 4; 1 : 0; esac;DEFINE _failedCount := _failed;TRANS mode = off -> (!(cmdIn = on) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> (!(cmdIn = off) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> (!(cmdIn = reset) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> ((cmdIn = off) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = off -> ((cmdIn = on) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> ((cmdIn = reset) | (next(mode) = tripped & next(_last) = tripped & !next(_failed)) | (next(mode) in {blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = blown -> (next(mode) = blown & next(_last) = blown & !next(_failed) | (next(mode) in {tripped, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = unknownCbFault -> (next(mode) = unknownCbFault & next(_last) = unknownCbFault & !next(_failed) | (next(mode) in {tripped, blown} & next(_last) = fail_ & next(_failed)))INVAR !(mode = on) | (currentOut = currentIn)INVAR !(mode = off) | (currentOut = off)INVAR !(mode = tripped) | (currentOut = off)INVAR !(mode = blown) | (currentOut = off)MODULE test_sourceVAR currentOut : {on,off};VAR mode : {nominal};DEFINE _last := nominal;DEFINE _failed := 0;DEFINE _faultModes := 0;DEFINE _broken := 0;DEFINE _brokenCount := _broken;DEFINE _brokenProb := 0;DEFINE _failedCount := _failed;TRANS mode = nominal -> (next(mode) = nominal)INVAR !(mode = nominal) | (currentOut = on)MODULE test_cb13VAR currentIn : {on,off};VAR currentOut : {on,off};VAR cmdIn : {on,off,reset,noCommand};VAR mode : {on,off,tripped,blown,unknownCbFault};VAR _last : {on,off,tripped,blown,unknownCbFault,fail_,otherwise_};INIT _last = otherwise_VAR _failed : boolean;INIT !_failedDEFINE _faultModes := {tripped, blown, unknownCbFault};DEFINE _broken := mode in _faultModes;DEFINE _brokenCount := _broken;DEFINE _brokenProb := case (mode = tripped) : 3; (mode = blown) : 4; (mode = unknownCbFault) : 4; 1 : 0; esac;DEFINE _failedCount := _failed;TRANS mode = off -> (!(cmdIn = on) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> (!(cmdIn = off) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> (!(cmdIn = reset) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> ((cmdIn = off) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = off -> ((cmdIn = on) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> ((cmdIn = reset) | (next(mode) = tripped & next(_last) = tripped & !next(_failed)) | (next(mode) in {blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = blown -> (next(mode) = blown & next(_last) = blown & !next(_failed) | (next(mode) in {tripped, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = unknownCbFault -> (next(mode) = unknownCbFault & next(_last) = unknownCbFault & !next(_failed) | (next(mode) in {tripped, blown} & next(_last) = fail_ & next(_failed)))INVAR !(mode = on) | (currentOut = currentIn)INVAR !(mode = off) | (currentOut = off)INVAR !(mode = tripped) | (currentOut = off)INVAR !(mode = blown) | (currentOut = off)MODULE test_cb15VAR currentIn : {on,off};VAR currentOut : {on,off};VAR cmdIn : {on,off,reset,noCommand};VAR mode : {on,off,tripped,blown,unknownCbFault};VAR _last : {on,off,tripped,blown,unknownCbFault,fail_,otherwise_};INIT _last = otherwise_VAR _failed : boolean;INIT !_failedDEFINE _faultModes := {tripped, blown, unknownCbFault};DEFINE _broken := mode in _faultModes;DEFINE _brokenCount := _broken;DEFINE _brokenProb := case (mode = tripped) : 3; (mode = blown) : 4; (mode = unknownCbFault) : 4; 1 : 0; esac;DEFINE _failedCount := _failed;TRANS mode = off -> (!(cmdIn = on) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> (!(cmdIn = off) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> (!(cmdIn = reset) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> ((cmdIn = off) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = off -> ((cmdIn = on) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> ((cmdIn = reset) | (next(mode) = tripped & next(_last) = tripped & !next(_failed)) | (next(mode) in {blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = blown -> (next(mode) = blown & next(_last) = blown & !next(_failed) | (next(mode) in {tripped, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = unknownCbFault -> (next(mode) = unknownCbFault & next(_last) = unknownCbFault & !next(_failed) | (next(mode) in {tripped, blown} & next(_last) = fail_ & next(_failed)))INVAR !(mode = on) | (currentOut = currentIn)INVAR !(mode = off) | (currentOut = off)INVAR !(mode = tripped) | (currentOut = off)INVAR !(mode = blown) | (currentOut = off)MODULE test_cb11VAR currentIn : {on,off};VAR currentOut : {on,off};VAR cmdIn : {on,off,reset,noCommand};VAR mode : {on,off,tripped,blown,unknownCbFault};VAR _last : {on,off,tripped,blown,unknownCbFault,fail_,otherwise_};INIT _last = otherwise_VAR _failed : boolean;INIT !_failedDEFINE _faultModes := {tripped, blown, unknownCbFault};DEFINE _broken := mode in _faultModes;DEFINE _brokenCount := _broken;DEFINE _brokenProb := case (mode = tripped) : 3; (mode = blown) : 4; (mode = unknownCbFault) : 4; 1 : 0; esac;DEFINE _failedCount := _failed;TRANS mode = off -> (!(cmdIn = on) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> (!(cmdIn = off) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> (!(cmdIn = reset) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> ((cmdIn = off) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = off -> ((cmdIn = on) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> ((cmdIn = reset) | (next(mode) = tripped & next(_last) = tripped & !next(_failed)) | (next(mode) in {blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = blown -> (next(mode) = blown & next(_last) = blown & !next(_failed) | (next(mode) in {tripped, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = unknownCbFault -> (next(mode) = unknownCbFault & next(_last) = unknownCbFault & !next(_failed) | (next(mode) in {tripped, blown} & next(_last) = fail_ & next(_failed)))INVAR !(mode = on) | (currentOut = currentIn)INVAR !(mode = off) | (currentOut = off)INVAR !(mode = tripped) | (currentOut = off)INVAR !(mode = blown) | (currentOut = off)MODULE test_led5VAR currentIn : {on,off};VAR ledState : {on,off};VAR mode : {nominal};DEFINE _last := nominal;DEFINE _failed := 0;DEFINE _faultModes := 0;DEFINE _broken := 0;DEFINE _brokenCount := _broken;DEFINE _brokenProb := 0;DEFINE _failedCount := _failed;TRANS mode = nominal -> (next(mode) = nominal)INVAR !(mode = nominal) | (ledState = currentIn)MODULE test_cb5VAR currentIn : {on,off};VAR currentOut : {on,off};VAR cmdIn : {on,off,reset,noCommand};VAR mode : {on,off,tripped,blown,unknownCbFault};VAR _last : {on,off,tripped,blown,unknownCbFault,fail_,otherwise_};INIT _last = otherwise_VAR _failed : boolean;INIT !_failedDEFINE _faultModes := {tripped, blown, unknownCbFault};DEFINE _broken := mode in _faultModes;DEFINE _brokenCount := _broken;DEFINE _brokenProb := case (mode = tripped) : 3; (mode = blown) : 4; (mode = unknownCbFault) : 4; 1 : 0; esac;DEFINE _failedCount := _failed;TRANS mode = off -> (!(cmdIn = on) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> (!(cmdIn = off) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> (!(cmdIn = reset) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> ((cmdIn = off) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = off -> ((cmdIn = on) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> ((cmdIn = reset) | (next(mode) = tripped & next(_last) = tripped & !next(_failed)) | (next(mode) in {blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = blown -> (next(mode) = blown & next(_last) = blown & !next(_failed) | (next(mode) in {tripped, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = unknownCbFault -> (next(mode) = unknownCbFault & next(_last) = unknownCbFault & !next(_failed) | (next(mode) in {tripped, blown} & next(_last) = fail_ & next(_failed)))INVAR !(mode = on) | (currentOut = currentIn)INVAR !(mode = off) | (currentOut = off)INVAR !(mode = tripped) | (currentOut = off)INVAR !(mode = blown) | (currentOut = off)MODULE test_led4VAR currentIn : {on,off};VAR ledState : {on,off};VAR mode : {nominal};DEFINE _last := nominal;DEFINE _failed := 0;DEFINE _faultModes := 0;DEFINE _broken := 0;DEFINE _brokenCount := _broken;DEFINE _brokenProb := 0;DEFINE _failedCount := _failed;TRANS mode = nominal -> (next(mode) = nominal)INVAR !(mode = nominal) | (ledState = currentIn)MODULE test_cb4--! sourceinfo value ON CB.MODE on--! sourceinfo value OFF CB.MODE off--! sourceinfo value TRIPPED CB.MODE tripped--! sourceinfo value BLOWN CB.MODE blown--! sourceinfo value UNKNOWNCBFAULT CB.MODE unknownCbFaultVAR currentIn : {on,off};VAR currentOut : {on,off};VAR cmdIn : {on,off,reset,noCommand};--! sourceinfo TEST.CB4.MODE CD.MODE test_cb4.modeVAR mode : {on,off,tripped,blown,unknownCbFault};VAR _last : {on,off,tripped,blown,unknownCbFault,fail_,otherwise_};INIT _last = otherwise_VAR _failed : boolean;INIT !_failedDEFINE _faultModes := {tripped, blown, unknownCbFault};DEFINE _broken := mode in _faultModes;DEFINE _brokenCount := _broken;DEFINE _brokenProb := case (mode = tripped) : 3; (mode = blown) : 4; (mode = unknownCbFault) : 4; 1 : 0; esac;DEFINE _failedCount := _failed;TRANS mode = off -> (!(cmdIn = on) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> (!(cmdIn = off) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> (!(cmdIn = reset) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = on -> ((cmdIn = off) | (next(mode) = on & next(_last) = on & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = off -> ((cmdIn = on) | (next(mode) = off & next(_last) = off & !next(_failed)) | (next(mode) in {tripped, blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = tripped -> ((cmdIn = reset) | (next(mode) = tripped & next(_last) = tripped & !next(_failed)) | (next(mode) in {blown, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = blown -> (next(mode) = blown & next(_last) = blown & !next(_failed) | (next(mode) in {tripped, unknownCbFault} & next(_last) = fail_ & next(_failed)))TRANS mode = unknownCbFault -> (next(mode) = unknownCbFault & next(_last) = unknownCbFault & !next(_failed) | (next(mode) in {tripped, blown} & next(_last) = fail_ & next(_failed)))INVAR !(mode = on) | (currentOut = currentIn)INVAR !(mode = off) | (currentOut = off)INVAR !(mode = tripped) | (currentOut = off)INVAR !(mode = blown) | (currentOut = off)MODULE mainVAR test : test; --! sourceinfo value LOWL2 pressure low--! sourceinfo value NOMINAL2 pressure nominal--! sourceinfo value HIGHL2 pressure high--! sourceinfo value HIGHL2 type2 high--! sourceinfo value NominalL2 type2 nominalINIT test.cb10.mode=offINIT test.cb11.mode=offINIT test.cb12.mode=offINIT test.cb13.mode=offINIT test.cb14.mode=offINIT test.cb15.mode=off--! sourceinfo variable TEST.CB1.L2.MODE pressure test.cb1.modeINIT test.cb1.mode=off--! sourceinfo variable TEST.CB2.L2.MODE type2 test.cb2.modeinit test.cb2.mode=off--! sourceinfo variable TEST.CB3.LIVINGSTONE.MODE valve test.cb3.modeinit test.cb3.mode=off--! sourceinfo variable TEST.CB4.MODE pressure2 test.cb4.modeINIT test.cb4.mode=offINIT test.cb5.mode=offINIT test.cb6.mode=offINIT test.cb7.mode=offINIT test.cb8.mode=offINIT test.cb9.mode=offINIT test.led1.mode=nominalINIT test.led2.mode=nominalINIT test.led3.mode=nominalINIT test.led4.mode=nominalINIT test.led5.mode=nominalINIT test.led6.mode=nominalINIT test.led7.mode=nominalINIT test.led8.mode=nominalINIT test.source.mode=nominalSPEC AG (test.cb1.mode=on & test.cb9.mode=on & test.cb13.mode=on & test.cb15.mode=on -> test.led2.ledState=on)