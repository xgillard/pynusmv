-- Generated by MPL2SMV 2.4.0 [$Id: mpl2smv.lisp,v 1.41 2000/10/30 23:46:23 pecheur Exp $]

MODULE switch_visible
VAR command_in : {on_, off_, no_cmd_};

MODULE switch (visible)
DEFINE command_in := visible.command_in;

VAR
  state : {on_, off_};
  _mode : {on_, off_};
DEFINE
  _broken := 0;
  _brokencount := _broken;
  _brokenproba := 0;
INIT (_mode = off_)
TRANS (((_mode = on_) & (command_in = off_)) -> (next(_mode) = off_))
TRANS (((_mode = on_) & !(command_in = off_)) -> (next(_mode) = on_))
TRANS (((_mode = off_) & (command_in = on_)) -> (next(_mode) = on_))
TRANS (((_mode = off_) & !(command_in = on_)) -> (next(_mode) = off_))
INVAR ((_mode = on_) -> (state = on_))
INVAR ((_mode = off_) -> (state = off_))

----------------------------------------------------------------------
MODULE flow_visible
VAR a : switch_visible;
VAR b : switch_visible;

MODULE flow(visible)
VAR
  flow_in : {low_, nominal_, high_};
-- STRUCTURE
  a : switch(visible.a);
  b : switch(visible.b);
DEFINE
  _broken := (b._broken | a._broken);
  _brokencount := (b._brokencount + a._brokencount);
  _brokenproba := (b._brokenproba + a._brokenproba);
INVAR (((a.state = on_) & (b.state = on_)) -> (flow_in = high_))
INVAR (!((a.state = on_) & (b.state = on_)) -> (((a.state = on_) -> (flow_in = nominal_)) & (!(a.state = on_) -> (flow_in = low_))))



MODULE gas-cylinder 
VAR
  output.pressure.sign-values : {zero_, positive_, negative_};
  output.pressure.relative-values : {low_, nominal_, high_};
  _mode : {not-empty_, unknown-tank-fault_};
DEFINE
  _fault_modes := {unknown-tank-fault_};
  _broken := (_mode in _fault_modes);
  _brokencount := _broken;
  _brokenproba := case (_mode = unknown-tank-fault_) : 4; 1 : 0; esac;
INIT (_mode = not-empty_)
TRANS (((_mode = not-empty_) -> (next(_mode) in _fault_modes)) | ((_mode = not-empty_) -> (next(_mode) = not-empty_)))
TRANS ((_mode = unknown-tank-fault_) -> (next(_mode) = unknown-tank-fault_))
INVAR ((_mode = not-empty_) -> ((output.pressure.relative-values = nominal_) & (output.pressure.sign-values = positive_) & (!(output.pressure.sign-values = negative_) & ((output.pressure.sign-values = zero_) -> !(output.pressure.relative-values = high_)))))

----------------------------------------------------------------------
MODULE solenoidvalve3way_visible
VAR cmdin : {set_, reset_, no-command_};

MODULE solenoidvalve3way(visible)
DEFINE cmdin := visible.cmdin;

VAR
  input.pressure.sign-values : {zero_, positive_, negative_};
  input.pressure.relative-values : {low_, nominal_, high_};
  outputset.pressure.sign-values : {zero_, positive_, negative_};
  outputset.pressure.relative-values : {low_, nominal_, high_};
  outputreset.pressure.sign-values : {zero_, positive_, negative_};
  outputreset.pressure.relative-values : {low_, nominal_, high_};
  _mode : {setposn_, resetposn_, unexpectedly-set_, unexpectedly-reset_, unexpectedly-betweensetreset_, unknown-valvefault_};
DEFINE
  _fault_modes := {unexpectedly-set_, unexpectedly-reset_, unexpectedly-betweensetreset_, unknown-valvefault_};
  _broken := (_mode in _fault_modes);
  _brokencount := _broken;
  _brokenproba := case (_mode = unexpectedly-set_) : 3; (_mode = unexpectedly-reset_) : 3; (_mode = unexpectedly-betweensetreset_) : 3; (_mode = unknown-valvefault_) : 4; 1 : 0; esac;
INIT (_mode = resetposn_)
TRANS (((_mode = setposn_) -> (next(_mode) in _fault_modes)) | (((_mode = setposn_) & (cmdin = reset_)) -> (next(_mode) = resetposn_)))
TRANS (((_mode = setposn_) -> (next(_mode) in _fault_modes)) | (((_mode = setposn_) & !(cmdin = reset_)) -> (next(_mode) = setposn_)))
TRANS (((_mode = resetposn_) -> (next(_mode) in _fault_modes)) | (((_mode = resetposn_) & (cmdin = set_)) -> (next(_mode) = setposn_)))
TRANS (((_mode = resetposn_) -> (next(_mode) in _fault_modes)) | (((_mode = resetposn_) & !(cmdin = set_)) -> (next(_mode) = resetposn_)))
TRANS (((_mode = unexpectedly-set_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpectedly-set_) -> (next(_mode) = unexpectedly-set_)))
TRANS (((_mode = unexpectedly-reset_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpectedly-reset_) -> (next(_mode) = unexpectedly-reset_)))
TRANS (((_mode = unexpectedly-betweensetreset_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpectedly-betweensetreset_) -> (next(_mode) = unexpectedly-betweensetreset_)))
TRANS (((_mode = unknown-valvefault_) -> (next(_mode) in _fault_modes)) | ((_mode = unknown-valvefault_) -> (next(_mode) = unknown-valvefault_)))

INVAR ((_mode = setposn_) -> (((((input.pressure.sign-values = positive_) <-> (outputset.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (outputset.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (outputset.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (outputset.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (outputset.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (outputset.pressure.relative-values = low_)))) & (outputreset.pressure.sign-values = zero_) & (outputreset.pressure.relative-values = nominal_)))

INVAR ((_mode = resetposn_) -> (((((input.pressure.sign-values = positive_) <-> (outputreset.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (outputreset.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (outputreset.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (outputreset.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (outputreset.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (outputreset.pressure.relative-values = low_)))) & (outputset.pressure.sign-values = zero_) & (outputset.pressure.relative-values = nominal_)))

INVAR ((_mode = unexpectedly-set_) -> (((((input.pressure.sign-values = positive_) <-> (outputset.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (outputset.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (outputset.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (outputset.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (outputset.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (outputset.pressure.relative-values = low_)))) & ((outputreset.pressure.sign-values = zero_) & (outputreset.pressure.relative-values = low_))))

INVAR ((_mode = unexpectedly-reset_) -> (((((input.pressure.sign-values = positive_) <-> (outputreset.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (outputreset.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (outputreset.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (outputreset.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (outputreset.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (outputreset.pressure.relative-values = low_)))) & ((outputset.pressure.sign-values = zero_) & (outputset.pressure.relative-values = low_))))

INVAR ((_mode = unexpectedly-betweensetreset_) -> ((input.pressure.sign-values = positive_) -> ((outputset.pressure.sign-values = positive_) & (outputreset.pressure.sign-values = positive_) & (outputset.pressure.relative-values = low_) & (outputreset.pressure.relative-values = low_))))

INVAR ((outputreset.pressure.sign-values = zero_) -> !(outputreset.pressure.relative-values = high_))
INVAR !(outputreset.pressure.sign-values = negative_)
INVAR ((outputset.pressure.sign-values = zero_) -> !(outputset.pressure.relative-values = high_))
INVAR !(outputset.pressure.sign-values = negative_)
INVAR ((input.pressure.sign-values = zero_) -> !(input.pressure.relative-values = high_))
INVAR !(input.pressure.sign-values = negative_)

----------------------------------------------------------------------
MODULE flow-control-valve_visible
VAR  cmdin : {close_, open_, no-command_};

MODULE flow-control-valve(visible) 
DEFINE cmdin := visible.cmdin;

VAR
  input.pressure.sign-values : {zero_, positive_, negative_};
  input.pressure.relative-values : {low_, nominal_, high_};
  output.pressure.sign-values : {zero_, positive_, negative_};
  output.pressure.relative-values : {low_, nominal_, high_};
  _mode : {openposn_, closedposn_, unexpected-highflow_, unexpected-lowflow_, unexpectedly-open_, unexpectedly-closed_, unknown-valvefault_};
DEFINE
  _fault_modes := {unexpected-highflow_, unexpected-lowflow_, unexpectedly-open_, unexpectedly-closed_, unknown-valvefault_};
  _broken := (_mode in _fault_modes);
  _brokencount := _broken;
  _brokenproba := case (_mode = unexpected-highflow_) : 3; (_mode = unexpected-lowflow_) : 3; (_mode = unexpectedly-open_) : 3; (_mode = unexpectedly-closed_) : 3; (_mode = unknown-valvefault_) : 4; 1 : 0; esac;
INIT (_mode = closedposn_)
TRANS (((_mode = openposn_) -> (next(_mode) in _fault_modes)) | (((_mode = openposn_) & (cmdin = close_)) -> (next(_mode) = closedposn_)))
TRANS (((_mode = openposn_) -> (next(_mode) in _fault_modes)) | (((_mode = openposn_) & !(cmdin = close_)) -> (next(_mode) = openposn_)))
TRANS (((_mode = closedposn_) -> (next(_mode) in _fault_modes)) | (((_mode = closedposn_) & (cmdin = open_)) -> (next(_mode) = openposn_)))
TRANS (((_mode = closedposn_) -> (next(_mode) in _fault_modes)) | (((_mode = closedposn_) & !(cmdin = open_)) -> (next(_mode) = closedposn_)))
TRANS (((_mode = unexpected-highflow_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpected-highflow_) -> (next(_mode) = unexpected-highflow_)))
TRANS (((_mode = unexpected-lowflow_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpected-lowflow_) -> (next(_mode) = unexpected-lowflow_)))
TRANS (((_mode = unexpectedly-open_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpectedly-open_) -> (next(_mode) = unexpectedly-open_)))
TRANS (((_mode = unexpectedly-closed_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpectedly-closed_) -> (next(_mode) = unexpectedly-closed_)))
TRANS (((_mode = unknown-valvefault_) -> (next(_mode) in _fault_modes)) | ((_mode = unknown-valvefault_) -> (next(_mode) = unknown-valvefault_)))

INVAR ((_mode = openposn_) -> ((((input.pressure.sign-values = positive_) <-> (output.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (output.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (output.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_)))))

INVAR ((_mode = closedposn_) -> ((output.pressure.sign-values = zero_) & (output.pressure.relative-values = nominal_)))

INVAR ((_mode = unexpected-highflow_) -> (((input.pressure.sign-values = positive_) -> ((output.pressure.relative-values = high_) & (output.pressure.sign-values = positive_))) & (!(input.pressure.sign-values = positive_) -> ((output.pressure.sign-values = zero_) & (((input.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_)))))))

INVAR ((_mode = unexpected-lowflow_) -> (((input.pressure.sign-values = positive_) -> ((output.pressure.relative-values = low_) & (output.pressure.sign-values = positive_))) & (!(input.pressure.sign-values = positive_) -> ((output.pressure.sign-values = zero_) & (((input.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_)))))))

INVAR ((_mode = unexpectedly-open_) -> ((((input.pressure.sign-values = positive_) <-> (output.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (output.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (output.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_)))))

INVAR ((_mode = unexpectedly-closed_) -> ((output.pressure.sign-values = zero_) & (output.pressure.relative-values = low_)))

INVAR ((output.pressure.sign-values = zero_) -> !(output.pressure.relative-values = high_))
INVAR !(output.pressure.sign-values = negative_)
INVAR ((input.pressure.sign-values = zero_) -> !(input.pressure.relative-values = high_))
INVAR !(input.pressure.sign-values = negative_)

----------------------------------------------------------------------
MODULE flow-sensor_visible
VAR massflowvalue : {low_, nominal_, high_};
VAR massflowsign : {zero_, positive_, negative_};

MODULE flow-sensor(visible)
DEFINE massflowvalue := visible.massflowvalue;
DEFINE massflowsign  := visible.massflowsign;

VAR
  flowin.sign-values : {zero_, positive_, negative_};
  flowin.relative-values : {low_, nominal_, high_};
  _mode : {nominal-operation_, flow-mass-fault_};
DEFINE
  _fault_modes := {flow-mass-fault_};
  _broken := (_mode in _fault_modes);
  _brokencount := _broken;
  _brokenproba := case (_mode = flow-mass-fault_) : 3; 1 : 0; esac;
INIT (_mode = nominal-operation_)
TRANS (((_mode = nominal-operation_) -> (next(_mode) in _fault_modes)) | ((_mode = nominal-operation_) -> (next(_mode) = nominal-operation_)))
TRANS ((_mode = flow-mass-fault_) -> (next(_mode) = flow-mass-fault_))
INVAR ((_mode = nominal-operation_) -> ((((flowin.sign-values = positive_) <-> (massflowsign = positive_)) & ((flowin.sign-values = negative_) <-> (massflowsign = negative_)) & ((flowin.sign-values = zero_) <-> (massflowsign = zero_))) & (((flowin.relative-values = high_) <-> (massflowvalue = high_)) & ((flowin.relative-values = nominal_) <-> (massflowvalue = nominal_)) & ((flowin.relative-values = low_) <-> (massflowvalue = low_)))))

----------------------------------------------------------------------
MODULE solenoidvalve2way_visible 
VAR cmdin : {close_, open_, no-command_};

MODULE solenoidvalve2way(visible)
DEFINE cmdin := visible.cmdin;

VAR
  input.pressure.sign-values : {zero_, positive_, negative_};
  input.pressure.relative-values : {low_, nominal_, high_};
  output.pressure.sign-values : {zero_, positive_, negative_};
  output.pressure.relative-values : {low_, nominal_, high_};
  _mode : {openposn_, closedposn_, unexpectedly-closed_, unexpectedly-open_, unknown-valvefault_};
DEFINE
  _fault_modes := {unexpectedly-closed_, unexpectedly-open_, unknown-valvefault_};
  _broken := (_mode in _fault_modes);
  _brokencount := _broken;
  _brokenproba := case (_mode = unexpectedly-closed_) : 3; (_mode = unexpectedly-open_) : 3; (_mode = unknown-valvefault_) : 4; 1 : 0; esac;
INIT (_mode = closedposn_)
TRANS (((_mode = openposn_) -> (next(_mode) in _fault_modes)) | (((_mode = openposn_) & (cmdin = close_)) -> (next(_mode) = closedposn_)))
TRANS (((_mode = openposn_) -> (next(_mode) in _fault_modes)) | (((_mode = openposn_) & !(cmdin = close_)) -> (next(_mode) = openposn_)))
TRANS (((_mode = closedposn_) -> (next(_mode) in _fault_modes)) | (((_mode = closedposn_) & (cmdin = open_)) -> (next(_mode) = openposn_)))
TRANS (((_mode = closedposn_) -> (next(_mode) in _fault_modes)) | (((_mode = closedposn_) & !(cmdin = open_)) -> (next(_mode) = closedposn_)))
TRANS (((_mode = unexpectedly-closed_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpectedly-closed_) -> (next(_mode) = unexpectedly-closed_)))
TRANS (((_mode = unexpectedly-open_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpectedly-open_) -> (next(_mode) = unexpectedly-open_)))
TRANS (((_mode = unknown-valvefault_) -> (next(_mode) in _fault_modes)) | ((_mode = unknown-valvefault_) -> (next(_mode) = unknown-valvefault_)))
INVAR ((_mode = openposn_) -> ((((input.pressure.sign-values = positive_) <-> (output.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (output.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (output.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_)))))
INVAR ((_mode = closedposn_) -> ((output.pressure.sign-values = zero_) & (output.pressure.relative-values = nominal_)))
INVAR ((_mode = unexpectedly-closed_) -> ((output.pressure.sign-values = zero_) & (output.pressure.relative-values = low_)))
INVAR ((_mode = unexpectedly-open_) -> ((((input.pressure.sign-values = positive_) <-> (output.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (output.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (output.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_)))))
INVAR ((output.pressure.sign-values = zero_) -> !(output.pressure.relative-values = high_))
INVAR !(output.pressure.sign-values = negative_)
INVAR ((input.pressure.sign-values = zero_) -> !(input.pressure.relative-values = high_))
INVAR !(input.pressure.sign-values = negative_)

----------------------------------------------------------------------
MODULE flowbranch_visible
VAR flowsensor : flow-sensor_visible;
VAR fc : flow-control-valve_visible;
VAR sv2way : solenoidvalve2way_visible;

MODULE flowbranch(visible) 
VAR
  input.pressure.sign-values : {zero_, positive_, negative_};
  input.pressure.relative-values : {low_, nominal_, high_};
  output.pressure.sign-values : {zero_, positive_, negative_};
  output.pressure.relative-values : {low_, nominal_, high_};
  flowout.sign-values : {zero_, positive_, negative_};
  flowout.relative-values : {low_, nominal_, high_};
-- STRUCTURE
  fc : flow-control-valve(visible.fc);
  flowsensor : flow-sensor(visible.flowsensor);
  sv2way : solenoidvalve2way(visible.sv2way);

DEFINE
  _broken := (sv2way._broken | flowsensor._broken | fc._broken);
  _brokencount := (sv2way._brokencount + flowsensor._brokencount + fc._brokencount);
  _brokenproba := (sv2way._brokenproba + flowsensor._brokenproba + fc._brokenproba);
INVAR ((output.pressure.relative-values = nominal_) -> (flowout.relative-values = nominal_))
INVAR (!(output.pressure.relative-values = nominal_) -> (((output.pressure.relative-values = high_) -> (flowout.relative-values = high_)) & (!(output.pressure.relative-values = high_) -> (flowout.relative-values = low_))))
INVAR ((output.pressure.sign-values = positive_) -> (flowout.sign-values = positive_))
INVAR (!(output.pressure.sign-values = positive_) -> (flowout.sign-values = zero_))
INVAR ((flowout.sign-values = positive_) <-> (flowsensor.flowin.sign-values = positive_))
INVAR ((flowout.sign-values = negative_) <-> (flowsensor.flowin.sign-values = negative_))
INVAR ((flowout.sign-values = zero_) <-> (flowsensor.flowin.sign-values = zero_))
INVAR ((flowout.relative-values = high_) <-> (flowsensor.flowin.relative-values = high_))
INVAR ((flowout.relative-values = nominal_) <-> (flowsensor.flowin.relative-values = nominal_))
INVAR ((flowout.relative-values = low_) <-> (flowsensor.flowin.relative-values = low_))
INVAR ((fc.output.pressure.sign-values = positive_) <-> (output.pressure.sign-values = positive_))
INVAR ((fc.output.pressure.sign-values = negative_) <-> (output.pressure.sign-values = negative_))
INVAR ((fc.output.pressure.sign-values = zero_) <-> (output.pressure.sign-values = zero_))
INVAR ((fc.output.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_))
INVAR ((fc.output.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_))
INVAR ((fc.output.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_))
INVAR ((sv2way.output.pressure.sign-values = positive_) <-> (fc.input.pressure.sign-values = positive_))
INVAR ((sv2way.output.pressure.sign-values = negative_) <-> (fc.input.pressure.sign-values = negative_))
INVAR ((sv2way.output.pressure.sign-values = zero_) <-> (fc.input.pressure.sign-values = zero_))
INVAR ((sv2way.output.pressure.relative-values = high_) <-> (fc.input.pressure.relative-values = high_))
INVAR ((sv2way.output.pressure.relative-values = nominal_) <-> (fc.input.pressure.relative-values = nominal_))
INVAR ((sv2way.output.pressure.relative-values = low_) <-> (fc.input.pressure.relative-values = low_))
INVAR ((input.pressure.sign-values = positive_) <-> (sv2way.input.pressure.sign-values = positive_))
INVAR ((input.pressure.sign-values = negative_) <-> (sv2way.input.pressure.sign-values = negative_))
INVAR ((input.pressure.sign-values = zero_) <-> (sv2way.input.pressure.sign-values = zero_))
INVAR ((input.pressure.relative-values = high_) <-> (sv2way.input.pressure.relative-values = high_))
INVAR ((input.pressure.relative-values = nominal_) <-> (sv2way.input.pressure.relative-values = nominal_))
INVAR ((input.pressure.relative-values = low_) <-> (sv2way.input.pressure.relative-values = low_))
INVAR ((output.pressure.sign-values = zero_) -> !(output.pressure.relative-values = high_))
INVAR !(output.pressure.sign-values = negative_)
INVAR ((input.pressure.sign-values = zero_) -> !(input.pressure.relative-values = high_))
INVAR !(input.pressure.sign-values = negative_)

----------------------------------------------------------------------
MODULE flowmodule_visible
VAR branch1 : flowbranch_visible;
VAR branch2 : flowbranch_visible;
VAR sv3way : solenoidvalve3way_visible;

MODULE flowmodule(visible) 
VAR
  input.pressure.sign-values : {zero_, positive_, negative_};
  input.pressure.relative-values : {low_, nominal_, high_};
  output.pressure.sign-values : {zero_, positive_, negative_};
  output.pressure.relative-values : {low_, nominal_, high_};
  flowout.sign-values : {zero_, positive_, negative_};
  flowout.relative-values : {low_, nominal_, high_};
-- STRUCTURE
  sv3way : solenoidvalve3way(visible.sv3way);
  branch1 : flowbranch(visible.branch1);
  branch2 : flowbranch(visible.branch2);

DEFINE
  _broken := (branch2._broken | branch1._broken | sv3way._broken);
  _brokencount := (branch2._brokencount + branch1._brokencount + sv3way._brokencount);
  _brokenproba := (branch2._brokenproba + branch1._brokenproba + sv3way._brokenproba);
INVAR ((output.pressure.sign-values = positive_) <-> (flowout.sign-values = positive_))
INVAR ((output.pressure.sign-values = negative_) <-> (flowout.sign-values = negative_))
INVAR ((output.pressure.sign-values = zero_) <-> (flowout.sign-values = zero_))
INVAR ((output.pressure.relative-values = high_) <-> (flowout.relative-values = high_))
INVAR ((output.pressure.relative-values = nominal_) <-> (flowout.relative-values = nominal_))
INVAR ((output.pressure.relative-values = low_) <-> (flowout.relative-values = low_))
INVAR ((branch1.output.pressure.sign-values = positive_) -> ((((branch1.output.pressure.sign-values = positive_) <-> (output.pressure.sign-values = positive_)) & ((branch1.output.pressure.sign-values = negative_) <-> (output.pressure.sign-values = negative_)) & ((branch1.output.pressure.sign-values = zero_) <-> (output.pressure.sign-values = zero_))) & (((branch1.output.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((branch1.output.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((branch1.output.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_)))))
INVAR (!(branch1.output.pressure.sign-values = positive_) -> (((branch2.output.pressure.sign-values = positive_) -> ((((branch2.output.pressure.sign-values = positive_) <-> (output.pressure.sign-values = positive_)) & ((branch2.output.pressure.sign-values = negative_) <-> (output.pressure.sign-values = negative_)) & ((branch2.output.pressure.sign-values = zero_) <-> (output.pressure.sign-values = zero_))) & (((branch2.output.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((branch2.output.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((branch2.output.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_))))) & (!(branch2.output.pressure.sign-values = positive_) -> (((branch1.output.pressure.relative-values = low_) -> ((output.pressure.sign-values = zero_) & (output.pressure.relative-values = low_))) & (!(branch1.output.pressure.relative-values = low_) -> (((branch2.output.pressure.relative-values = low_) -> ((output.pressure.sign-values = zero_) & (output.pressure.relative-values = low_))) & (!(branch2.output.pressure.relative-values = low_) -> ((output.pressure.sign-values = zero_) & (output.pressure.relative-values = nominal_)))))))))
INVAR ((sv3way.outputset.pressure.sign-values = positive_) <-> (branch2.input.pressure.sign-values = positive_))
INVAR ((sv3way.outputset.pressure.sign-values = negative_) <-> (branch2.input.pressure.sign-values = negative_))
INVAR ((sv3way.outputset.pressure.sign-values = zero_) <-> (branch2.input.pressure.sign-values = zero_))
INVAR ((sv3way.outputset.pressure.relative-values = high_) <-> (branch2.input.pressure.relative-values = high_))
INVAR ((sv3way.outputset.pressure.relative-values = nominal_) <-> (branch2.input.pressure.relative-values = nominal_))
INVAR ((sv3way.outputset.pressure.relative-values = low_) <-> (branch2.input.pressure.relative-values = low_))
INVAR ((sv3way.outputreset.pressure.sign-values = positive_) <-> (branch1.input.pressure.sign-values = positive_))
INVAR ((sv3way.outputreset.pressure.sign-values = negative_) <-> (branch1.input.pressure.sign-values = negative_))
INVAR ((sv3way.outputreset.pressure.sign-values = zero_) <-> (branch1.input.pressure.sign-values = zero_))
INVAR ((sv3way.outputreset.pressure.relative-values = high_) <-> (branch1.input.pressure.relative-values = high_))
INVAR ((sv3way.outputreset.pressure.relative-values = nominal_) <-> (branch1.input.pressure.relative-values = nominal_))
INVAR ((sv3way.outputreset.pressure.relative-values = low_) <-> (branch1.input.pressure.relative-values = low_))
INVAR ((input.pressure.sign-values = positive_) <-> (sv3way.input.pressure.sign-values = positive_))
INVAR ((input.pressure.sign-values = negative_) <-> (sv3way.input.pressure.sign-values = negative_))
INVAR ((input.pressure.sign-values = zero_) <-> (sv3way.input.pressure.sign-values = zero_))
INVAR ((input.pressure.relative-values = high_) <-> (sv3way.input.pressure.relative-values = high_))
INVAR ((input.pressure.relative-values = nominal_) <-> (sv3way.input.pressure.relative-values = nominal_))
INVAR ((input.pressure.relative-values = low_) <-> (sv3way.input.pressure.relative-values = low_))
INVAR ((output.pressure.sign-values = zero_) -> !(output.pressure.relative-values = high_))
INVAR !(output.pressure.sign-values = negative_)
INVAR ((input.pressure.sign-values = zero_) -> !(input.pressure.relative-values = high_))
INVAR !(input.pressure.sign-values = negative_)

----------------------------------------------------------------------
MODULE sp_visible
VAR  
  h2_level : {low_, nominal_, high_};
  co2_level : {low_, nominal_, high_};

MODULE sp(visible) 
  DEFINE h2_level  := visible.h2_level;
  DEFINE co2_level := visible.co2_level;

VAR _mode : {nominal_};
DEFINE
  _broken := 0;
  _brokencount := _broken;
  _brokenproba := 0;
INIT (_mode = nominal_)
TRANS ((_mode = nominal_) -> (next(_mode) = nominal_))

----------------------------------------------------------------------
MODULE heater_visible
VAR cmdin : {on_, off_, no-command_};

MODULE heater(visible) 
DEFINE cmdin := visible.cmdin;

VAR
  current : {off_, low_, nominal_, high_};
  heatout : {off_, low_, nominal_, high_, unknown_};
  heaterstatus : {on_, off_};
  _mode : {onstate_, offstate_, failed-off_, failed-high_, failed-low_, unrecoverable-fault_};
DEFINE
  _fault_modes := {failed-off_, failed-high_, failed-low_, unrecoverable-fault_};
  _broken := (_mode in _fault_modes);
  _brokencount := _broken;
  _brokenproba := case (_mode = failed-off_) : 3; (_mode = failed-high_) : 3; (_mode = failed-low_) : 3; (_mode = unrecoverable-fault_) : 4; 1 : 0; esac;
INIT (_mode = offstate_)
TRANS (((_mode = onstate_) -> (next(_mode) in _fault_modes)) | (((_mode = onstate_) & (cmdin = off_)) -> (next(_mode) = offstate_)))
TRANS (((_mode = onstate_) -> (next(_mode) in _fault_modes)) | (((_mode = onstate_) & !(cmdin = off_)) -> (next(_mode) = onstate_)))
TRANS (((_mode = offstate_) -> (next(_mode) in _fault_modes)) | (((_mode = offstate_) & (cmdin = on_)) -> (next(_mode) = onstate_)))
TRANS (((_mode = failed-off_) -> (next(_mode) in _fault_modes)) | ((_mode = failed-off_) -> (next(_mode) = failed-off_)))
TRANS (((_mode = failed-high_) -> (next(_mode) in _fault_modes)) | (((_mode = failed-high_) & (cmdin = off_)) -> (next(_mode) = failed-off_)))
TRANS (((_mode = failed-high_) -> (next(_mode) in _fault_modes)) | (((_mode = failed-high_) & !(cmdin = off_)) -> (next(_mode) = failed-high_)))
TRANS (((_mode = failed-low_) -> (next(_mode) in _fault_modes)) | (((_mode = failed-low_) & (cmdin = off_)) -> (next(_mode) = failed-off_)))
TRANS (((_mode = failed-low_) -> (next(_mode) in _fault_modes)) | (((_mode = failed-low_) & !(cmdin = off_)) -> (next(_mode) = failed-low_)))
TRANS (((_mode = unrecoverable-fault_) -> (next(_mode) in _fault_modes)) | ((_mode = unrecoverable-fault_) -> (next(_mode) = unrecoverable-fault_)))
INVAR ((_mode = onstate_) -> ((current = nominal_) & (heatout = nominal_) & (heaterstatus = on_)))
INVAR ((_mode = offstate_) -> ((current = off_) & (heatout = off_) & (heaterstatus = off_)))
INVAR ((_mode = failed-off_) -> ((current = off_) & (heatout = off_) & (heaterstatus = off_)))
INVAR ((_mode = failed-high_) -> (((current = high_) | (current = nominal_)) & (heatout = high_) & (heaterstatus = on_)))
INVAR ((_mode = failed-low_) -> ((current = low_) & (heatout = low_) & (heaterstatus = on_)))

----------------------------------------------------------------------
MODULE current-sensor_visible
VAR current : {off_, low_, nominal_, high_};

MODULE current-sensor(visible) 
DEFINE current := visible.current;

VAR
  currentin : {off_, low_, nominal_, high_};
  _mode : {nominal-operation_, current-sensor-fault_};
DEFINE
  _fault_modes := {current-sensor-fault_};
  _broken := (_mode in _fault_modes);
  _brokencount := _broken;
  _brokenproba := case (_mode = current-sensor-fault_) : 3; 1 : 0; esac;
INIT (_mode = nominal-operation_)
TRANS (((_mode = nominal-operation_) -> (next(_mode) in _fault_modes)) | ((_mode = nominal-operation_) -> (next(_mode) = nominal-operation_)))
TRANS ((_mode = current-sensor-fault_) -> (next(_mode) = current-sensor-fault_))
INVAR ((_mode = nominal-operation_) -> (currentin = current))

----------------------------------------------------------------------
MODULE heater-module_visible
VAR currentsensor : current-sensor_visible;
VAR heater : heater_visible;

MODULE heater-module(visible) 
VAR
  heatout : {off_, low_, nominal_, high_, unknown_};
-- STRUCTURE
  heater : heater(visible.heater);
  currentsensor : current-sensor(visible.currentsensor);

DEFINE
  _broken := (currentsensor._broken | heater._broken);
  _brokencount := (currentsensor._brokencount + heater._brokencount);
  _brokenproba := (currentsensor._brokenproba + heater._brokenproba);
INVAR (heater.heatout = heatout)
INVAR (heater.current = currentsensor.currentin)

----------------------------------------------------------------------
MODULE heater-controller_visible
VAR hr2 : heater-module_visible;
VAR hr1 : heater-module_visible;


MODULE heater-controller(visible) 
VAR
  heatout : {off_, low_, nominal_, high_, unknown_};
-- STRUCTURE
  hr2 : heater-module(visible.hr2);
  hr1 : heater-module(visible.hr1);

DEFINE
  _broken := (hr1._broken | hr2._broken);
  _brokencount := (hr1._brokencount + hr2._brokencount);
  _brokenproba := (hr1._brokenproba + hr2._brokenproba);
INVAR ((hr2.heater.heaterstatus = on_) -> (((hr1.heater.heaterstatus = off_) -> (heatout = hr2.heater.heatout)) & (!(hr1.heater.heaterstatus = off_) -> ((((hr2.heater.heatout = low_) & (hr1.heater.heatout = low_)) -> (heatout = unknown_)) & (!((hr2.heater.heatout = low_) & (hr1.heater.heatout = low_)) -> (heatout = high_))))))
INVAR (!(hr2.heater.heaterstatus = on_) -> (((hr1.heater.heaterstatus = on_) -> (heatout = hr1.heater.heatout)) & (!(hr1.heater.heaterstatus = on_) -> (heatout = off_))))

----------------------------------------------------------------------
MODULE reactor_visible
VAR reactorstate : {cold_, warming_, steadystate_, cooling_};
VAR tempchange   : {zero_, positive_, negative_};

MODULE reactor(visible) 
DEFINE reactorstate := visible.reactorstate;
DEFINE tempchange   := visible.tempchange;

VAR
  heatin : {off_, low_, nominal_, high_, unknown_};
  rate_of_temp_change : {low_, nominal_, high_};
  reactor_temp : {low_, nominal_, high_};
  _mode : {nominal-operation_};
DEFINE
  _broken := 0;
  _brokencount := _broken;
  _brokenproba := 0;
INIT (_mode = nominal-operation_)
INIT (reactorstate = cold_)
TRANS ((_mode = nominal-operation_) -> (next(_mode) = nominal-operation_))
INVAR ((_mode = nominal-operation_) -> (((heatin = nominal_) -> ((reactor_temp = nominal_) & (tempchange = zero_))) & (!(heatin = nominal_) -> (((heatin = high_) -> (tempchange = positive_)) & (!(heatin = high_) -> (tempchange = negative_))))))


----------------------------------------------------------------------
MODULE temperature-sensor_visible
VAR temperature : {low_, nominal_, high_};	

MODULE temperature-sensor(visible) 
DEFINE temperature := visible.temperature;

VAR
  tempin : {low_, nominal_, high_};
  _mode : {nominal-operation_, temp-sensor-fault_};
DEFINE
  _fault_modes := {temp-sensor-fault_};
  _broken := (_mode in _fault_modes);
  _brokencount := _broken;
  _brokenproba := case (_mode = temp-sensor-fault_) : 3; 1 : 0; esac;
INIT (_mode = nominal-operation_)
TRANS (((_mode = nominal-operation_) -> (next(_mode) in _fault_modes)) | ((_mode = nominal-operation_) -> (next(_mode) = nominal-operation_)))
TRANS ((_mode = temp-sensor-fault_) -> (next(_mode) = temp-sensor-fault_))
INVAR ((_mode = nominal-operation_) -> (tempin = temperature))

----------------------------------------------------------------------
MODULE rwgs-module_visible
VAR heatctl : heater-controller_visible;
VAR t1 : temperature-sensor_visible;
VAR t2 : temperature-sensor_visible;
VAR t3 : temperature-sensor_visible;
VAR reactor : reactor_visible;

MODULE rwgs-module(visible)
VAR
  heatin : {off_, low_, nominal_, high_, unknown_};
  tempchange : {zero_, positive_, negative_};
  reactor_temp : {low_, nominal_, high_};
-- STRUCTURE
  heatctl : heater-controller(visible.heatctl);
  reactor : reactor(visible.reactor);
  t1 : temperature-sensor(visible.t1);
  t2 : temperature-sensor(visible.t2);
  t3 : temperature-sensor(visible.t3);
DEFINE
  _broken := (t3._broken | t2._broken | t1._broken | reactor._broken | heatctl._broken);
  _brokencount := (t3._brokencount + t2._brokencount + t1._brokencount + reactor._brokencount + heatctl._brokencount);
  _brokenproba := (t3._brokenproba + t2._brokenproba + t1._brokenproba + reactor._brokenproba + heatctl._brokenproba);
INVAR (reactor_temp = t3.tempin)
INVAR (reactor_temp = t2.tempin)
INVAR (reactor_temp = t1.tempin)
INVAR (reactor_temp = reactor.reactor_temp)
INVAR (tempchange = reactor.tempchange)
INVAR (heatin = reactor.heatin)
INVAR (heatin = heatctl.heatout)
----------------------------------------------------------------------

MODULE tank
VAR
  flow-in : {on_, off_};
  relative-flow-magnitude : {high-in_, high-out_, equal_};
  flow-out : {on_, off_};
  level_switch : {empty_, full_, inbetween_};
  change : {increasing_, decreasing_, steady_};
  _mode : {nominal_};
DEFINE
  _broken := 0;
  _brokencount := _broken;
  _brokenproba := 0;
INIT (_mode = nominal_) -- Force component to start in a nominal mode
TRANS ((_mode = nominal_) -> (next(_mode) = nominal_))
INVAR ((change = steady_) <-> (((flow-in = off_) & (flow-out = off_)) | ((relative-flow-magnitude = equal_) & ((flow-out = on_) & (flow-in = on_)))))
INVAR ((change = increasing_) <-> (((flow-in = on_) & (flow-out = off_)) | ((relative-flow-magnitude = high-in_) & ((flow-out = on_) & (flow-in = on_)))))
INVAR ((change = decreasing_) <-> (((flow-in = off_) & (flow-out = on_)) | ((relative-flow-magnitude = high-out_) & ((flow-out = on_) & (flow-in = on_)))))
INVAR ((level_switch = full_) -> !(change = increasing_))
INVAR ((level_switch = empty_) -> !(change = decreasing_))

----------------------------------------------------------------------
MODULE waterflowmodule_visible
VAR sv9  : solenoidvalve2way_visible;
VAR sv10 : solenoidvalve2way_visible;
VAR sv8 : solenoidvalve3way_visible; 

MODULE waterflowmodule(visible) 
VAR
  pressure : {on_, off_};
  flow-in : {on_, off_};
  flow-out : {on_, off_};
-- STRUCTURE
  sv8 : solenoidvalve3way(visible.sv8);
  sv9 : solenoidvalve2way(visible.sv9);
  sv10 : solenoidvalve2way(visible.sv10);
DEFINE
  _broken := (sv10._broken | sv9._broken | sv8._broken);
  _brokencount := (sv10._brokencount + sv9._brokencount + sv8._brokencount);
  _brokenproba := (sv10._brokenproba + sv9._brokenproba + sv8._brokenproba);
INVAR (((sv9.output.pressure.sign-values = positive_) | (sv10.output.pressure.sign-values = positive_)) -> ((flow-in = on_) & (flow-out = on_)))
INVAR (!((sv9.output.pressure.sign-values = positive_) | (sv10.output.pressure.sign-values = positive_)) -> ((flow-in = off_) & (flow-out = off_)))
INVAR ((pressure = off_) -> (sv8.input.pressure.sign-values = zero_))
INVAR ((pressure = on_) -> (sv8.input.pressure.sign-values = positive_))
INVAR ((sv8.outputset.pressure.sign-values = positive_) <-> (sv10.input.pressure.sign-values = positive_))
INVAR ((sv8.outputset.pressure.sign-values = negative_) <-> (sv10.input.pressure.sign-values = negative_))
INVAR ((sv8.outputset.pressure.sign-values = zero_) <-> (sv10.input.pressure.sign-values = zero_))
INVAR ((sv8.outputset.pressure.relative-values = high_) <-> (sv10.input.pressure.relative-values = high_))
INVAR ((sv8.outputset.pressure.relative-values = nominal_) <-> (sv10.input.pressure.relative-values = nominal_))
INVAR ((sv8.outputset.pressure.relative-values = low_) <-> (sv10.input.pressure.relative-values = low_))
INVAR ((sv8.outputreset.pressure.sign-values = positive_) <-> (sv9.input.pressure.sign-values = positive_))
INVAR ((sv8.outputreset.pressure.sign-values = negative_) <-> (sv9.input.pressure.sign-values = negative_))
INVAR ((sv8.outputreset.pressure.sign-values = zero_) <-> (sv9.input.pressure.sign-values = zero_))
INVAR ((sv8.outputreset.pressure.relative-values = high_) <-> (sv9.input.pressure.relative-values = high_))
INVAR ((sv8.outputreset.pressure.relative-values = nominal_) <-> (sv9.input.pressure.relative-values = nominal_))
INVAR ((sv8.outputreset.pressure.relative-values = low_) <-> (sv9.input.pressure.relative-values = low_))

----------------------------------------------------------------------
MODULE pump_visible
VAR cmd_in : {on_, off_, no-command_};

MODULE pump(visible) 
DEFINE cmd_in := visible.cmd_in;

VAR
  pressure-in : {on_, off_};
  flow-in : {on_, off_};
  status : {on_, off_};
  pressure : {off_, low_, high_};
  flow-out : {on_, off_};
  _mode : {on_, off_, stuck-on_, stuck-off_};
DEFINE
  _fault_modes := {stuck-on_, stuck-off_};
  _broken := (_mode in _fault_modes);
  _brokencount := _broken;
  _brokenproba := case (_mode = stuck-on_) : 1; (_mode = stuck-off_) : 1; 1 : 0; esac;
INIT (_mode = off_)
TRANS (((_mode = on_) -> (next(_mode) in _fault_modes)) | (((_mode = on_) & (cmd_in = off_)) -> (next(_mode) = off_)))
TRANS (((_mode = on_) -> (next(_mode) in _fault_modes)) | (((_mode = on_) & !(cmd_in = off_)) -> (next(_mode) = on_)))
TRANS (((_mode = off_) -> (next(_mode) in _fault_modes)) | (((_mode = off_) & (cmd_in = on_)) -> (next(_mode) = on_)))
TRANS (((_mode = off_) -> (next(_mode) in _fault_modes)) | (((_mode = off_) & !(cmd_in = on_)) -> (next(_mode) = off_)))
TRANS (((_mode = stuck-on_) -> (next(_mode) in _fault_modes)) | ((_mode = stuck-on_) -> (next(_mode) = stuck-on_)))
TRANS (((_mode = stuck-off_) -> (next(_mode) in _fault_modes)) | ((_mode = stuck-off_) -> (next(_mode) = stuck-off_)))
INVAR (((status = on_) & (pressure-in = on_)) <-> ((flow-in = on_) & (flow-out = on_)))
INVAR ((flow-in = on_) <-> !(pressure = off_))
INVAR ((_mode = on_) -> (status = on_))
INVAR ((_mode = off_) -> ((status = off_) & (flow-in = off_) & (flow-out = off_)))
INVAR ((_mode = stuck-on_) -> (status = on_))
INVAR ((_mode = stuck-off_) -> ((status = off_) & (flow-in = off_) & (flow-out = off_)))

----------------------------------------------------------------------
MODULE electrolyzer_visible
VAR cmd_in : {on_, off_, no-command_};

MODULE electrolyzer(visible) 
DEFINE cmd_in := visible.cmd_in;

VAR
  water-flow-in : {on_, off_};
  status : {on_, off_};
  h2-pressure : {low_, nominal_, high_};
  h2-flow : {low_, nominal_, high_};
  o2-flow : {low_, nominal_, high_};
  temp : {low_, nominal_, high_};
  water-flow-out : {on_, off_};
  _mode : {on_, off_, stuck-on_, stuck-off_, low-output_, high-output_};
DEFINE
  _fault_modes := {stuck-on_, stuck-off_, low-output_, high-output_};
  _broken := (_mode in _fault_modes);
  _brokencount := _broken;
  _brokenproba := case (_mode = stuck-on_) : 1; (_mode = stuck-off_) : 1; (_mode = low-output_) : 1; (_mode = high-output_) : 1; 1 : 0; esac;
INIT (_mode = off_)
TRANS (((_mode = on_) -> (next(_mode) in _fault_modes)) | (((_mode = on_) & (cmd_in = off_)) -> (next(_mode) = off_)))
TRANS (((_mode = on_) -> (next(_mode) in _fault_modes)) | (((_mode = on_) & !(cmd_in = off_)) -> (next(_mode) = on_)))
TRANS (((_mode = off_) -> (next(_mode) in _fault_modes)) | (((_mode = off_) & (cmd_in = on_)) -> (next(_mode) = on_)))
TRANS (((_mode = off_) -> (next(_mode) in _fault_modes)) | (((_mode = off_) & !(cmd_in = on_)) -> (next(_mode) = off_)))
TRANS (((_mode = stuck-on_) -> (next(_mode) in _fault_modes)) | ((_mode = stuck-on_) -> (next(_mode) = stuck-on_)))
TRANS (((_mode = stuck-off_) -> (next(_mode) in _fault_modes)) | ((_mode = stuck-off_) -> (next(_mode) = stuck-off_)))
TRANS (((_mode = low-output_) -> (next(_mode) in _fault_modes)) | ((_mode = low-output_) -> (next(_mode) = low-output_)))
TRANS (((_mode = high-output_) -> (next(_mode) in _fault_modes)) | ((_mode = high-output_) -> (next(_mode) = high-output_)))
INVAR (water-flow-in = water-flow-out)
INVAR (((water-flow-in = on_) & (status = on_)) -> (temp = nominal_))
INVAR (((water-flow-in = off_) & (status = on_)) -> (temp = high_))
INVAR (((water-flow-in = on_) & (status = off_)) -> (temp = low_))
INVAR ((_mode = on_) -> ((status = on_) & (h2-pressure = nominal_) & (h2-flow = nominal_) & (o2-flow = nominal_)))
INVAR ((_mode = off_) -> ((status = off_) & (h2-pressure = low_) & (h2-flow = low_) & (o2-flow = low_)))
INVAR ((_mode = stuck-on_) -> ((status = on_) & (h2-pressure = nominal_) & (h2-flow = nominal_) & (o2-flow = nominal_)))
INVAR ((_mode = stuck-off_) -> ((status = off_) & (h2-pressure = low_) & (h2-flow = low_) & (o2-flow = low_)))
INVAR ((_mode = low-output_) -> ((status = on_) & (h2-flow = low_) & (o2-flow = low_)))
INVAR ((_mode = high-output_) -> ((status = on_) & (h2-flow = high_) & (o2-flow = high_)))

----------------------------------------------------------------------
MODULE change_sensor_visible
VAR indicated_change : {increasing_, decreasing_, steady_};

MODULE change_sensor(visible) 
DEFINE indicated_change := visible.indicated_change;

VAR
  change : {increasing_, decreasing_, steady_};
  _mode : {normal_, failed_};
DEFINE
  _fault_modes := {failed_};
  _broken := (_mode in _fault_modes);
  _brokencount := _broken;
  _brokenproba := case (_mode = failed_) : 1; 1 : 0; esac;
INIT (_mode = normal_)
TRANS (((_mode = normal_) -> (next(_mode) in _fault_modes)) | ((_mode = normal_) -> (next(_mode) = normal_)))
TRANS ((_mode = failed_) -> (next(_mode) = failed_))
INVAR ((_mode = normal_) -> (change = indicated_change))

----------------------------------------------------------------------
MODULE level_sensor_visible
VAR indicated_level : {empty_, full_, inbetween_};

MODULE level_sensor(visible)
DEFINE indicated_level := visible.indicated_level;

VAR
  level : {empty_, full_, inbetween_};
  _mode : {normal_, failed_};
DEFINE
  _fault_modes := {failed_};
  _broken := (_mode in _fault_modes);
  _brokencount := _broken;
  _brokenproba := case (_mode = failed_) : 1; 1 : 0; esac;
INIT (_mode = normal_)
TRANS (((_mode = normal_) -> (next(_mode) in _fault_modes)) | ((_mode = normal_) -> (next(_mode) = normal_)))
TRANS ((_mode = failed_) -> (next(_mode) = failed_))
INVAR ((_mode = normal_) -> (level = indicated_level))

----------------------------------------------------------------------
MODULE water-pressure-transducer_visible
VAR indicated_pres : {off_, low_, high_};

MODULE water-pressure-transducer(visible) 
DEFINE indicated_pres := visible.indicated_pres;

VAR
  pres : {off_, low_, high_};
  _mode : {normal_, failed_};
DEFINE
  _fault_modes := {failed_};
  _broken := (_mode in _fault_modes);
  _brokencount := _broken;
  _brokenproba := case (_mode = failed_) : 1; 1 : 0; esac;
INIT (_mode = normal_)
TRANS (((_mode = normal_) -> (next(_mode) in _fault_modes)) | ((_mode = normal_) -> (next(_mode) = normal_)))
TRANS ((_mode = failed_) -> (next(_mode) = failed_))
INVAR ((_mode = normal_) -> (pres = indicated_pres))

----------------------------------------------------------------------
MODULE pressure-transducer_visible 
VAR indicated_pres : {low_, nominal_, high_};


MODULE pressure-transducer(visible) 
DEFINE indicated_pres := visible.indicated_pres;

VAR
  pres : {low_, nominal_, high_};
  _mode : {normal_, failed_};
DEFINE
  _fault_modes := {failed_};
  _broken := (_mode in _fault_modes);
  _brokencount := _broken;
  _brokenproba := case (_mode = failed_) : 1; 1 : 0; esac;
INIT (_mode = normal_)
TRANS (((_mode = normal_) -> (next(_mode) in _fault_modes)) | ((_mode = normal_) -> (next(_mode) = normal_)))
TRANS ((_mode = failed_) -> (next(_mode) = failed_))
INVAR ((_mode = normal_) -> (pres = indicated_pres))

----------------------------------------------------------------------
MODULE tach_visible
VAR  indicated_revs : {on_, off_};

MODULE tach(visible)
DEFINE indicated_revs := visible.indicated_revs;
 
VAR
  revs-in : {on_, off_};
  _mode : {normal_, failed_};
DEFINE
  _fault_modes := {failed_};
  _broken := (_mode in _fault_modes);
  _brokencount := _broken;
  _brokenproba := case (_mode = failed_) : 1; 1 : 0; esac;
INIT (_mode = normal_)
TRANS (((_mode = normal_) -> (next(_mode) in _fault_modes)) | ((_mode = normal_) -> (next(_mode) = normal_)))
TRANS ((_mode = failed_) -> (next(_mode) = failed_))
INVAR ((_mode = normal_) -> (revs-in = indicated_revs))


----------------------------------------------------------------------
MODULE top-level_visible
VAR 
  reactor_conv : {low_, nominal_, high_};
  condenser_accum : {low_, nominal_, high_};
  sp1 : sp_visible;
  sp2 : sp_visible;
  sp3 : sp_visible;
  sp4 : sp_visible;
  sp7 : sp_visible;
  reactor : rwgs-module_visible;
  t8 : temperature-sensor_visible;
  t7 : temperature-sensor_visible;
  h2 : flowmodule_visible;
  co2 : flowmodule_visible;
  o2chg : change_sensor_visible;
  h2chg : change_sensor_visible;
  rwgschg : change_sensor_visible;
  o2lvl : level_sensor_visible;
  h2lvl : level_sensor_visible;
  rwgslvl : level_sensor_visible;
  p9 : pressure-transducer_visible;
  p10 : water-pressure-transducer_visible;
  ep1 : tach_visible;
  rp1 : tach_visible;
  drain : waterflowmodule_visible;
  compressor : switch_visible;
  h2o : flow_visible;
  electro : electrolyzer_visible;
  electro_pump : pump_visible;
  rwgs_pump : pump_visible;


MODULE top-level (visible)
DEFINE reactor_conv    := visible.reactor_conv;
DEFINE condenser_accum := visible.condenser_accum;

VAR
-- STRUCTURE
  compressor : switch(visible.compressor);
  h2o : flow(visible.h2o);
  h2tank : gas-cylinder;
  co2tank : gas-cylinder;
  h2 : flowmodule(visible.h2);
  co2 : flowmodule(visible.co2);
  sp1 : sp(visible.sp1);
  sp2 : sp(visible.sp2);
  sp3 : sp(visible.sp3);
  sp4 : sp(visible.sp4);
  sp7 : sp(visible.sp7);
  reactor : rwgs-module(visible.reactor);
  rwgs-trap : tank;
  h2-trap : tank;
  o2-trap : tank;
  drain : waterflowmodule(visible.drain);
  electro_pump : pump(visible.electro_pump);
  rwgs_pump : pump(visible.rwgs_pump);
  electro : electrolyzer(visible.electro);
  o2chg : change_sensor(visible.o2chg);
  h2chg : change_sensor(visible.h2chg);
  rwgschg : change_sensor(visible.rwgschg);
  o2lvl : level_sensor(visible.o2lvl);
  h2lvl : level_sensor(visible.h2lvl);
  rwgslvl : level_sensor(visible.rwgslvl);
  p10 : water-pressure-transducer(visible.p10);
  p9 : pressure-transducer(visible.p9);
  t8 : temperature-sensor(visible.t8);
  t7 : temperature-sensor(visible.t7);
  ep1 : tach(visible.ep1);
  rp1 : tach(visible.rp1);

DEFINE
  _broken := (rp1._broken | ep1._broken | t7._broken | t8._broken | p9._broken | p10._broken | rwgslvl._broken | h2lvl._broken | o2lvl._broken | rwgschg._broken | h2chg._broken | o2chg._broken | electro._broken | rwgs_pump._broken | electro_pump._broken | drain._broken | o2-trap._broken | h2-trap._broken | rwgs-trap._broken | reactor._broken | sp7._broken | sp4._broken | sp3._broken | sp2._broken | sp1._broken | co2._broken | h2._broken | co2tank._broken | h2tank._broken | h2o._broken | compressor._broken);
  _brokencount := (rp1._brokencount + ep1._brokencount + t7._brokencount + t8._brokencount + p9._brokencount + p10._brokencount + rwgslvl._brokencount + h2lvl._brokencount + o2lvl._brokencount + rwgschg._brokencount + h2chg._brokencount + o2chg._brokencount + electro._brokencount + rwgs_pump._brokencount + electro_pump._brokencount + drain._brokencount + o2-trap._brokencount + h2-trap._brokencount + rwgs-trap._brokencount + reactor._brokencount + sp7._brokencount + sp4._brokencount + sp3._brokencount + sp2._brokencount + sp1._brokencount + co2._brokencount + h2._brokencount + co2tank._brokencount + h2tank._brokencount + h2o._brokencount + compressor._brokencount);
  _brokenproba := (rp1._brokenproba + ep1._brokenproba + t7._brokenproba + t8._brokenproba + p9._brokenproba + p10._brokenproba + rwgslvl._brokenproba + h2lvl._brokenproba + o2lvl._brokenproba + rwgschg._brokenproba + h2chg._brokenproba + o2chg._brokenproba + electro._brokenproba + rwgs_pump._brokenproba + electro_pump._brokenproba + drain._brokenproba + o2-trap._brokenproba + h2-trap._brokenproba + rwgs-trap._brokenproba + reactor._brokenproba + sp7._brokenproba + sp4._brokenproba + sp3._brokenproba + sp2._brokenproba + sp1._brokenproba + co2._brokenproba + h2._brokenproba + co2tank._brokenproba + h2tank._brokenproba + h2o._brokenproba + compressor._brokenproba);
INVAR ((reactor.reactor.reactorstate = steadystate_) -> (rwgs-trap.flow-in = on_))
INVAR (!(reactor.reactor.reactorstate = steadystate_) -> (rwgs-trap.flow-in = off_))
INVAR ((rwgs-trap.flow-out = on_) -> (rwgs-trap.relative-flow-magnitude = high-out_))
INVAR (((electro.water-flow-out = on_) & (drain.flow-out = on_)) -> ((o2-trap.relative-flow-magnitude = high-in_) & (electro_pump.pressure = high_)))
INVAR (((electro.status = off_) & !(drain.flow-out = on_)) -> (o2-trap.relative-flow-magnitude = equal_))
INVAR (((electro.status = on_) & (electro.water-flow-out = on_) & !(drain.flow-out = on_)) -> (o2-trap.relative-flow-magnitude = high-out_))
INVAR ((!(o2-trap.level_switch = empty_) | (drain.flow-out = on_)) <-> (electro_pump.pressure-in = on_))
INVAR (((o2-trap.flow-out = on_) | (drain.flow-out = on_)) <-> (electro_pump.flow-in = on_))
INVAR (!(rwgs-trap.level_switch = empty_) <-> (rwgs_pump.pressure-in = on_))
INVAR (!(h2-trap.level_switch = empty_) <-> (drain.pressure = on_))
INVAR ((((h2.flowout.relative-values = high_) & ((co2.flowout.relative-values = nominal_) | (co2.flowout.relative-values = low_))) | ((h2.flowout.relative-values = nominal_) & (co2.flowout.relative-values = low_))) -> (sp1.h2_level = high_))
INVAR ((((co2.flowout.relative-values = high_) & ((h2.flowout.relative-values = nominal_) | (h2.flowout.relative-values = low_))) | ((co2.flowout.relative-values = nominal_) & (h2.flowout.relative-values = low_))) -> (sp1.co2_level = high_))
INVAR (((reactor.t2.temperature = low_) | (h2o.flow_in = high_) | (compressor.state = off_)) -> ((!(h2.flowout.relative-values = low_) -> (sp3.h2_level = high_)) & (!(co2.flowout.relative-values = low_) -> (sp3.co2_level = high_))))
INVAR ((((h2.flowout.relative-values = high_) & ((co2.flowout.relative-values = nominal_) | (co2.flowout.relative-values = low_))) | ((h2.flowout.relative-values = nominal_) & (co2.flowout.relative-values = low_))) -> (sp3.h2_level = high_))
INVAR ((((co2.flowout.relative-values = high_) & ((h2.flowout.relative-values = nominal_) | (h2.flowout.relative-values = low_))) | ((co2.flowout.relative-values = nominal_) & (h2.flowout.relative-values = low_))) -> (sp3.co2_level = high_))
INVAR ((h2.flowout.relative-values = high_) -> (sp3.h2_level = high_))
INVAR ((co2.flowout.relative-values = high_) -> (sp3.co2_level = high_))
INVAR ((reactor.t2.temperature = high_) -> (reactor_conv = high_))
INVAR (((compressor.state = off_) & !(reactor.t2.temperature = low_) & (co2.flowout.relative-values = h2.flowout.relative-values) & !(h2.flowout.relative-values = low_)) -> (reactor_conv = high_))
INVAR ((reactor.t2.temperature = low_) -> (reactor_conv = low_))
INVAR ((h2o.flow_in = high_) -> (reactor_conv = low_))
INVAR (((compressor.state = off_) | (co2.flowout.relative-values = low_) | (h2.flowout.relative-values = low_) | (h2o.flow_in = high_) | (reactor.t2.temperature = low_)) -> (condenser_accum = low_))
INVAR (((compressor.state = on_) & (co2.flowout.relative-values = nominal_) & (h2.flowout.relative-values = nominal_) & (co2.flowout.sign-values = positive_) & (h2.flowout.sign-values = positive_) & (h2o.flow_in = nominal_) & (reactor.t2.temperature = nominal_)) -> ((condenser_accum = nominal_) & (reactor_conv = nominal_) & (sp3.co2_level = nominal_) & (sp3.h2_level = nominal_) & (sp1.co2_level = nominal_) & (sp1.h2_level = nominal_)))
INVAR (electro.temp = t8.tempin)
INVAR (electro.temp = t7.tempin)
INVAR (electro.h2-pressure = p9.pres)
INVAR (electro_pump.pressure = p10.pres)
INVAR (h2-trap.level_switch = h2lvl.level)
INVAR (o2-trap.level_switch = o2lvl.level)
INVAR (rwgs-trap.level_switch = rwgslvl.level)
INVAR (h2-trap.change = h2chg.change)
INVAR (o2-trap.change = o2chg.change)
INVAR (rwgs-trap.change = rwgschg.change)
INVAR (electro.water-flow-out = o2-trap.flow-in)
INVAR (electro_pump.flow-out = electro.water-flow-in)
INVAR (h2-trap.flow-out = drain.flow-in)
INVAR (rwgs_pump.flow-out = h2-trap.flow-in)
INVAR (rwgs-trap.flow-out = rwgs_pump.flow-in)
INVAR (electro_pump.status = ep1.revs-in)
INVAR (rwgs_pump.status = rp1.revs-in)
INVAR ((co2tank.output.pressure.sign-values = positive_) <-> (co2.input.pressure.sign-values = positive_))
INVAR ((co2tank.output.pressure.sign-values = negative_) <-> (co2.input.pressure.sign-values = negative_))
INVAR ((co2tank.output.pressure.sign-values = zero_) <-> (co2.input.pressure.sign-values = zero_))
INVAR ((co2tank.output.pressure.relative-values = high_) <-> (co2.input.pressure.relative-values = high_))
INVAR ((co2tank.output.pressure.relative-values = nominal_) <-> (co2.input.pressure.relative-values = nominal_))
INVAR ((co2tank.output.pressure.relative-values = low_) <-> (co2.input.pressure.relative-values = low_))
INVAR ((h2tank.output.pressure.sign-values = positive_) <-> (h2.input.pressure.sign-values = positive_))
INVAR ((h2tank.output.pressure.sign-values = negative_) <-> (h2.input.pressure.sign-values = negative_))
INVAR ((h2tank.output.pressure.sign-values = zero_) <-> (h2.input.pressure.sign-values = zero_))
INVAR ((h2tank.output.pressure.relative-values = high_) <-> (h2.input.pressure.relative-values = high_))
INVAR ((h2tank.output.pressure.relative-values = nominal_) <-> (h2.input.pressure.relative-values = nominal_))
INVAR ((h2tank.output.pressure.relative-values = low_) <-> (h2.input.pressure.relative-values = low_))

MODULE twin(visible)
VAR testbed : top-level(visible);

MODULE main
VAR
-- STRUCTURE
  testbed_visible : top-level_visible;  
  testbed : top-level(testbed_visible);
  twin    : twin(testbed_visible);  

DEFINE
  _broken := testbed._broken;
  _brokencount := testbed._brokencount;
  _brokenproba := testbed._brokenproba;

LTLSPEC
  G ( !testbed._broken & twin._broken  )

-- SPEC
--   EF (testbed.compressor._mode = off_)
-- SPEC
--   EF (testbed.compressor._mode = on_)
-- SPEC
--   EF (testbed.h2o.a._mode = off_)
-- SPEC
--   EF (testbed.h2o.a._mode = on_)
-- SPEC
--   EF (testbed.h2o.b._mode = off_)
-- SPEC
--   EF (testbed.h2o.b._mode = on_)
