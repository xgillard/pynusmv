-- Generated by MPL2SMV 2.4.0 [$Id: mpl2smv.lisp,v 1.41 2000/10/30 23:46:23 pecheur Exp $]

MODULE switch 
VAR
  command_in : {on_, off_, no_cmd_};
  state : {on_, off_};
  _mode : {on_, off_};
DEFINE
  _broken := 0;
  -- _brokencount := _broken;
  -- _brokenproba := 0;
INIT (_mode = off_)
TRANS (((_mode = on_) & (command_in = off_)) -> (next(_mode) = off_))
TRANS (((_mode = on_) & !(command_in = off_)) -> (next(_mode) = on_))
TRANS (((_mode = off_) & (command_in = on_)) -> (next(_mode) = on_))
TRANS (((_mode = off_) & !(command_in = on_)) -> (next(_mode) = off_))
INVAR ((_mode = on_) -> (state = on_))
INVAR ((_mode = off_) -> (state = off_))



MODULE flow 
VAR
  flow_in : {low_, nominal_, high_};
-- STRUCTURE
  a : switch;
  b : switch;
DEFINE
  _broken := (b._broken | a._broken);
  -- _brokencount := (b._brokencount + a._brokencount);
  -- _brokenproba := (b._brokenproba + a._brokenproba);
INVAR (((a.state = on_) & (b.state = on_)) -> (flow_in = high_))
INVAR (!((a.state = on_) & (b.state = on_)) -> (((a.state = on_) -> (flow_in = nominal_)) & (!(a.state = on_) -> (flow_in = low_))))



MODULE gas_cylinder 
VAR
  output.pressure.sign-values : {zero_, positive_, negative_};
  output.pressure.relative-values : {low_, nominal_, high_};
  _mode : {not_empty_, unknown_tank_fault_};
DEFINE
  _fault_modes := {unknown_tank_fault_};
  _broken := (_mode in _fault_modes);
  -- _brokencount := _broken;
  -- _brokenproba := case (_mode = unknown_tank_fault_) : 4; 1 : 0; esac;
INIT (_mode = not_empty_)
TRANS (((_mode = not_empty_) -> (next(_mode) in _fault_modes)) | ((_mode = not_empty_) -> (next(_mode) = not_empty_)))
TRANS ((_mode = unknown_tank_fault_) -> (next(_mode) = unknown_tank_fault_))
INVAR ((_mode = not_empty_) -> ((output.pressure.relative-values = nominal_) & (output.pressure.sign-values = positive_) & (!(output.pressure.sign-values = negative_) & ((output.pressure.sign-values = zero_) -> !(output.pressure.relative-values = high_)))))




MODULE solenoidvalve3way 
VAR
  cmdin : {set_, reset_, no-command_};
  input.pressure.sign-values : {zero_, positive_, negative_};
  input.pressure.relative-values : {low_, nominal_, high_};
  outputset.pressure.sign-values : {zero_, positive_, negative_};
  outputset.pressure.relative-values : {low_, nominal_, high_};
  outputreset.pressure.sign-values : {zero_, positive_, negative_};
  outputreset.pressure.relative-values : {low_, nominal_, high_};
  _mode : {setposn_, resetposn_, unexpectedly_set_, unexpectedly_reset_, unexpectedly_betweensetreset_, unknown_valvefault_};
DEFINE
  _fault_modes := {unexpectedly_set_, unexpectedly_reset_, unexpectedly_betweensetreset_, unknown_valvefault_};
  _broken := (_mode in _fault_modes);
  -- _brokencount := _broken;
  -- _brokenproba := case (_mode = unexpectedly_set_) : 3; (_mode = unexpectedly_reset_) : 3; (_mode = unexpectedly_betweensetreset_) : 3; (_mode = unknown_valvefault_) : 4; 1 : 0; esac;
INIT (_mode = resetposn_)
TRANS (((_mode = setposn_) -> (next(_mode) in _fault_modes)) | (((_mode = setposn_) & (cmdin = reset_)) -> (next(_mode) = resetposn_)))
TRANS (((_mode = setposn_) -> (next(_mode) in _fault_modes)) | (((_mode = setposn_) & !(cmdin = reset_)) -> (next(_mode) = setposn_)))
TRANS (((_mode = resetposn_) -> (next(_mode) in _fault_modes)) | (((_mode = resetposn_) & (cmdin = set_)) -> (next(_mode) = setposn_)))
TRANS (((_mode = resetposn_) -> (next(_mode) in _fault_modes)) | (((_mode = resetposn_) & !(cmdin = set_)) -> (next(_mode) = resetposn_)))
TRANS (((_mode = unexpectedly_set_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpectedly_set_) -> (next(_mode) = unexpectedly_set_)))
TRANS (((_mode = unexpectedly_reset_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpectedly_reset_) -> (next(_mode) = unexpectedly_reset_)))
TRANS (((_mode = unexpectedly_betweensetreset_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpectedly_betweensetreset_) -> (next(_mode) = unexpectedly_betweensetreset_)))
TRANS (((_mode = unknown_valvefault_) -> (next(_mode) in _fault_modes)) | ((_mode = unknown_valvefault_) -> (next(_mode) = unknown_valvefault_)))

INVAR ((_mode = setposn_) -> (((((input.pressure.sign-values = positive_) <-> (outputset.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (outputset.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (outputset.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (outputset.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (outputset.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (outputset.pressure.relative-values = low_)))) & (outputreset.pressure.sign-values = zero_) & (outputreset.pressure.relative-values = nominal_)))

INVAR ((_mode = resetposn_) -> (((((input.pressure.sign-values = positive_) <-> (outputreset.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (outputreset.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (outputreset.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (outputreset.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (outputreset.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (outputreset.pressure.relative-values = low_)))) & (outputset.pressure.sign-values = zero_) & (outputset.pressure.relative-values = nominal_)))

INVAR ((_mode = unexpectedly_set_) -> (((((input.pressure.sign-values = positive_) <-> (outputset.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (outputset.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (outputset.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (outputset.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (outputset.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (outputset.pressure.relative-values = low_)))) & ((outputreset.pressure.sign-values = zero_) & (outputreset.pressure.relative-values = low_))))

INVAR ((_mode = unexpectedly_reset_) -> (((((input.pressure.sign-values = positive_) <-> (outputreset.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (outputreset.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (outputreset.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (outputreset.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (outputreset.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (outputreset.pressure.relative-values = low_)))) & ((outputset.pressure.sign-values = zero_) & (outputset.pressure.relative-values = low_))))

INVAR ((_mode = unexpectedly_betweensetreset_) -> ((input.pressure.sign-values = positive_) -> ((outputset.pressure.sign-values = positive_) & (outputreset.pressure.sign-values = positive_) & (outputset.pressure.relative-values = low_) & (outputreset.pressure.relative-values = low_))))

INVAR ((outputreset.pressure.sign-values = zero_) -> !(outputreset.pressure.relative-values = high_))
INVAR !(outputreset.pressure.sign-values = negative_)
INVAR ((outputset.pressure.sign-values = zero_) -> !(outputset.pressure.relative-values = high_))
INVAR !(outputset.pressure.sign-values = negative_)
INVAR ((input.pressure.sign-values = zero_) -> !(input.pressure.relative-values = high_))
INVAR !(input.pressure.sign-values = negative_)




MODULE flow-control-valve 
VAR
  cmdin : {close_, open_, no-command_};
  input.pressure.sign-values : {zero_, positive_, negative_};
  input.pressure.relative-values : {low_, nominal_, high_};
  output.pressure.sign-values : {zero_, positive_, negative_};
  output.pressure.relative-values : {low_, nominal_, high_};
  _mode : {openposn_, closedposn_, unexpected-highflow_, unexpected-lowflow_, unexpectedly_open_, unexpectedly_closed_, unknown_valvefault_};
DEFINE
  _fault_modes := {unexpected-highflow_, unexpected-lowflow_, unexpectedly_open_, unexpectedly_closed_, unknown_valvefault_};
  _broken := (_mode in _fault_modes);
  -- _brokencount := _broken;
  -- _brokenproba := case (_mode = unexpected-highflow_) : 3; (_mode = unexpected-lowflow_) : 3; (_mode = unexpectedly_open_) : 3; (_mode = unexpectedly_closed_) : 3; (_mode = unknown_valvefault_) : 4; 1 : 0; esac;
INIT (_mode = closedposn_)
TRANS (((_mode = openposn_) -> (next(_mode) in _fault_modes)) | (((_mode = openposn_) & (cmdin = close_)) -> (next(_mode) = closedposn_)))
TRANS (((_mode = openposn_) -> (next(_mode) in _fault_modes)) | (((_mode = openposn_) & !(cmdin = close_)) -> (next(_mode) = openposn_)))
TRANS (((_mode = closedposn_) -> (next(_mode) in _fault_modes)) | (((_mode = closedposn_) & (cmdin = open_)) -> (next(_mode) = openposn_)))
TRANS (((_mode = closedposn_) -> (next(_mode) in _fault_modes)) | (((_mode = closedposn_) & !(cmdin = open_)) -> (next(_mode) = closedposn_)))
TRANS (((_mode = unexpected-highflow_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpected-highflow_) -> (next(_mode) = unexpected-highflow_)))
TRANS (((_mode = unexpected-lowflow_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpected-lowflow_) -> (next(_mode) = unexpected-lowflow_)))
TRANS (((_mode = unexpectedly_open_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpectedly_open_) -> (next(_mode) = unexpectedly_open_)))
TRANS (((_mode = unexpectedly_closed_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpectedly_closed_) -> (next(_mode) = unexpectedly_closed_)))
TRANS (((_mode = unknown_valvefault_) -> (next(_mode) in _fault_modes)) | ((_mode = unknown_valvefault_) -> (next(_mode) = unknown_valvefault_)))

INVAR ((_mode = openposn_) -> ((((input.pressure.sign-values = positive_) <-> (output.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (output.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (output.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_)))))

INVAR ((_mode = closedposn_) -> ((output.pressure.sign-values = zero_) & (output.pressure.relative-values = nominal_)))

INVAR ((_mode = unexpected-highflow_) -> (((input.pressure.sign-values = positive_) -> ((output.pressure.relative-values = high_) & (output.pressure.sign-values = positive_))) & (!(input.pressure.sign-values = positive_) -> ((output.pressure.sign-values = zero_) & (((input.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_)))))))

INVAR ((_mode = unexpected-lowflow_) -> (((input.pressure.sign-values = positive_) -> ((output.pressure.relative-values = low_) & (output.pressure.sign-values = positive_))) & (!(input.pressure.sign-values = positive_) -> ((output.pressure.sign-values = zero_) & (((input.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_)))))))

INVAR ((_mode = unexpectedly_open_) -> ((((input.pressure.sign-values = positive_) <-> (output.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (output.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (output.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_)))))

INVAR ((_mode = unexpectedly_closed_) -> ((output.pressure.sign-values = zero_) & (output.pressure.relative-values = low_)))

INVAR ((output.pressure.sign-values = zero_) -> !(output.pressure.relative-values = high_))
INVAR !(output.pressure.sign-values = negative_)
INVAR ((input.pressure.sign-values = zero_) -> !(input.pressure.relative-values = high_))
INVAR !(input.pressure.sign-values = negative_)




MODULE flow_sensor 
VAR
  flowin.sign-values : {zero_, positive_, negative_};
  flowin.relative-values : {low_, nominal_, high_};
  massflowvalue : {low_, nominal_, high_};
  massflowsign : {zero_, positive_, negative_};
  _mode : {nominal-operation_, flow-mass_fault_};
DEFINE
  _fault_modes := {flow-mass_fault_};
  _broken := (_mode in _fault_modes);
  -- _brokencount := _broken;
  -- _brokenproba := case (_mode = flow-mass_fault_) : 3; 1 : 0; esac;
INIT (_mode = nominal-operation_)
TRANS (((_mode = nominal-operation_) -> (next(_mode) in _fault_modes)) | ((_mode = nominal-operation_) -> (next(_mode) = nominal-operation_)))
TRANS ((_mode = flow-mass_fault_) -> (next(_mode) = flow-mass_fault_))
INVAR ((_mode = nominal-operation_) -> ((((flowin.sign-values = positive_) <-> (massflowsign = positive_)) & ((flowin.sign-values = negative_) <-> (massflowsign = negative_)) & ((flowin.sign-values = zero_) <-> (massflowsign = zero_))) & (((flowin.relative-values = high_) <-> (massflowvalue = high_)) & ((flowin.relative-values = nominal_) <-> (massflowvalue = nominal_)) & ((flowin.relative-values = low_) <-> (massflowvalue = low_)))))



MODULE solenoidvalve2way 
VAR
  cmdin : {close_, open_, no-command_};
  input.pressure.sign-values : {zero_, positive_, negative_};
  input.pressure.relative-values : {low_, nominal_, high_};
  output.pressure.sign-values : {zero_, positive_, negative_};
  output.pressure.relative-values : {low_, nominal_, high_};
  _mode : {openposn_, closedposn_, unexpectedly_closed_, unexpectedly_open_, unknown_valvefault_};
DEFINE
  _fault_modes := {unexpectedly_closed_, unexpectedly_open_, unknown_valvefault_};
  _broken := (_mode in _fault_modes);
  -- _brokencount := _broken;
  -- _brokenproba := case (_mode = unexpectedly_closed_) : 3; (_mode = unexpectedly_open_) : 3; (_mode = unknown_valvefault_) : 4; 1 : 0; esac;
INIT (_mode = closedposn_)
TRANS (((_mode = openposn_) -> (next(_mode) in _fault_modes)) | (((_mode = openposn_) & (cmdin = close_)) -> (next(_mode) = closedposn_)))
TRANS (((_mode = openposn_) -> (next(_mode) in _fault_modes)) | (((_mode = openposn_) & !(cmdin = close_)) -> (next(_mode) = openposn_)))
TRANS (((_mode = closedposn_) -> (next(_mode) in _fault_modes)) | (((_mode = closedposn_) & (cmdin = open_)) -> (next(_mode) = openposn_)))
TRANS (((_mode = closedposn_) -> (next(_mode) in _fault_modes)) | (((_mode = closedposn_) & !(cmdin = open_)) -> (next(_mode) = closedposn_)))
TRANS (((_mode = unexpectedly_closed_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpectedly_closed_) -> (next(_mode) = unexpectedly_closed_)))
TRANS (((_mode = unexpectedly_open_) -> (next(_mode) in _fault_modes)) | ((_mode = unexpectedly_open_) -> (next(_mode) = unexpectedly_open_)))
TRANS (((_mode = unknown_valvefault_) -> (next(_mode) in _fault_modes)) | ((_mode = unknown_valvefault_) -> (next(_mode) = unknown_valvefault_)))
INVAR ((_mode = openposn_) -> ((((input.pressure.sign-values = positive_) <-> (output.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (output.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (output.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_)))))
INVAR ((_mode = closedposn_) -> ((output.pressure.sign-values = zero_) & (output.pressure.relative-values = nominal_)))
INVAR ((_mode = unexpectedly_closed_) -> ((output.pressure.sign-values = zero_) & (output.pressure.relative-values = low_)))
INVAR ((_mode = unexpectedly_open_) -> ((((input.pressure.sign-values = positive_) <-> (output.pressure.sign-values = positive_)) & ((input.pressure.sign-values = negative_) <-> (output.pressure.sign-values = negative_)) & ((input.pressure.sign-values = zero_) <-> (output.pressure.sign-values = zero_))) & (((input.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((input.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((input.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_)))))
INVAR ((output.pressure.sign-values = zero_) -> !(output.pressure.relative-values = high_))
INVAR !(output.pressure.sign-values = negative_)
INVAR ((input.pressure.sign-values = zero_) -> !(input.pressure.relative-values = high_))
INVAR !(input.pressure.sign-values = negative_)




MODULE flowbranch 
VAR
  input.pressure.sign-values : {zero_, positive_, negative_};
  input.pressure.relative-values : {low_, nominal_, high_};
  output.pressure.sign-values : {zero_, positive_, negative_};
  output.pressure.relative-values : {low_, nominal_, high_};
  flowout.sign-values : {zero_, positive_, negative_};
  flowout.relative-values : {low_, nominal_, high_};
-- STRUCTURE
  fc : flow-control-valve;
  flowsensor : flow_sensor;
  sv2way : solenoidvalve2way;
DEFINE
  _broken := (sv2way._broken | flowsensor._broken | fc._broken);
  -- _brokencount := (sv2way._brokencount + flowsensor._brokencount + fc._brokencount);
  -- _brokenproba := (sv2way._brokenproba + flowsensor._brokenproba + fc._brokenproba);
INVAR ((output.pressure.relative-values = nominal_) -> (flowout.relative-values = nominal_))
INVAR (!(output.pressure.relative-values = nominal_) -> (((output.pressure.relative-values = high_) -> (flowout.relative-values = high_)) & (!(output.pressure.relative-values = high_) -> (flowout.relative-values = low_))))
INVAR ((output.pressure.sign-values = positive_) -> (flowout.sign-values = positive_))
INVAR (!(output.pressure.sign-values = positive_) -> (flowout.sign-values = zero_))
INVAR ((flowout.sign-values = positive_) <-> (flowsensor.flowin.sign-values = positive_))
INVAR ((flowout.sign-values = negative_) <-> (flowsensor.flowin.sign-values = negative_))
INVAR ((flowout.sign-values = zero_) <-> (flowsensor.flowin.sign-values = zero_))
INVAR ((flowout.relative-values = high_) <-> (flowsensor.flowin.relative-values = high_))
INVAR ((flowout.relative-values = nominal_) <-> (flowsensor.flowin.relative-values = nominal_))
INVAR ((flowout.relative-values = low_) <-> (flowsensor.flowin.relative-values = low_))
INVAR ((fc.output.pressure.sign-values = positive_) <-> (output.pressure.sign-values = positive_))
INVAR ((fc.output.pressure.sign-values = negative_) <-> (output.pressure.sign-values = negative_))
INVAR ((fc.output.pressure.sign-values = zero_) <-> (output.pressure.sign-values = zero_))
INVAR ((fc.output.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_))
INVAR ((fc.output.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_))
INVAR ((fc.output.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_))
INVAR ((sv2way.output.pressure.sign-values = positive_) <-> (fc.input.pressure.sign-values = positive_))
INVAR ((sv2way.output.pressure.sign-values = negative_) <-> (fc.input.pressure.sign-values = negative_))
INVAR ((sv2way.output.pressure.sign-values = zero_) <-> (fc.input.pressure.sign-values = zero_))
INVAR ((sv2way.output.pressure.relative-values = high_) <-> (fc.input.pressure.relative-values = high_))
INVAR ((sv2way.output.pressure.relative-values = nominal_) <-> (fc.input.pressure.relative-values = nominal_))
INVAR ((sv2way.output.pressure.relative-values = low_) <-> (fc.input.pressure.relative-values = low_))
INVAR ((input.pressure.sign-values = positive_) <-> (sv2way.input.pressure.sign-values = positive_))
INVAR ((input.pressure.sign-values = negative_) <-> (sv2way.input.pressure.sign-values = negative_))
INVAR ((input.pressure.sign-values = zero_) <-> (sv2way.input.pressure.sign-values = zero_))
INVAR ((input.pressure.relative-values = high_) <-> (sv2way.input.pressure.relative-values = high_))
INVAR ((input.pressure.relative-values = nominal_) <-> (sv2way.input.pressure.relative-values = nominal_))
INVAR ((input.pressure.relative-values = low_) <-> (sv2way.input.pressure.relative-values = low_))
INVAR ((output.pressure.sign-values = zero_) -> !(output.pressure.relative-values = high_))
INVAR !(output.pressure.sign-values = negative_)
INVAR ((input.pressure.sign-values = zero_) -> !(input.pressure.relative-values = high_))
INVAR !(input.pressure.sign-values = negative_)



MODULE flowmodule 
VAR
  input.pressure.sign-values : {zero_, positive_, negative_};
  input.pressure.relative-values : {low_, nominal_, high_};
  output.pressure.sign-values : {zero_, positive_, negative_};
  output.pressure.relative-values : {low_, nominal_, high_};
  flowout.sign-values : {zero_, positive_, negative_};
  flowout.relative-values : {low_, nominal_, high_};
-- STRUCTURE
  sv3way : solenoidvalve3way;
  branch1 : flowbranch;
  branch2 : flowbranch;
DEFINE
  _broken := (branch2._broken | branch1._broken | sv3way._broken);
  -- _brokencount := (branch2._brokencount + branch1._brokencount + sv3way._brokencount);
  -- _brokenproba := (branch2._brokenproba + branch1._brokenproba + sv3way._brokenproba);
INVAR ((output.pressure.sign-values = positive_) <-> (flowout.sign-values = positive_))
INVAR ((output.pressure.sign-values = negative_) <-> (flowout.sign-values = negative_))
INVAR ((output.pressure.sign-values = zero_) <-> (flowout.sign-values = zero_))
INVAR ((output.pressure.relative-values = high_) <-> (flowout.relative-values = high_))
INVAR ((output.pressure.relative-values = nominal_) <-> (flowout.relative-values = nominal_))
INVAR ((output.pressure.relative-values = low_) <-> (flowout.relative-values = low_))
INVAR ((branch1.output.pressure.sign-values = positive_) -> ((((branch1.output.pressure.sign-values = positive_) <-> (output.pressure.sign-values = positive_)) & ((branch1.output.pressure.sign-values = negative_) <-> (output.pressure.sign-values = negative_)) & ((branch1.output.pressure.sign-values = zero_) <-> (output.pressure.sign-values = zero_))) & (((branch1.output.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((branch1.output.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((branch1.output.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_)))))
INVAR (!(branch1.output.pressure.sign-values = positive_) -> (((branch2.output.pressure.sign-values = positive_) -> ((((branch2.output.pressure.sign-values = positive_) <-> (output.pressure.sign-values = positive_)) & ((branch2.output.pressure.sign-values = negative_) <-> (output.pressure.sign-values = negative_)) & ((branch2.output.pressure.sign-values = zero_) <-> (output.pressure.sign-values = zero_))) & (((branch2.output.pressure.relative-values = high_) <-> (output.pressure.relative-values = high_)) & ((branch2.output.pressure.relative-values = nominal_) <-> (output.pressure.relative-values = nominal_)) & ((branch2.output.pressure.relative-values = low_) <-> (output.pressure.relative-values = low_))))) & (!(branch2.output.pressure.sign-values = positive_) -> (((branch1.output.pressure.relative-values = low_) -> ((output.pressure.sign-values = zero_) & (output.pressure.relative-values = low_))) & (!(branch1.output.pressure.relative-values = low_) -> (((branch2.output.pressure.relative-values = low_) -> ((output.pressure.sign-values = zero_) & (output.pressure.relative-values = low_))) & (!(branch2.output.pressure.relative-values = low_) -> ((output.pressure.sign-values = zero_) & (output.pressure.relative-values = nominal_)))))))))
INVAR ((sv3way.outputset.pressure.sign-values = positive_) <-> (branch2.input.pressure.sign-values = positive_))
INVAR ((sv3way.outputset.pressure.sign-values = negative_) <-> (branch2.input.pressure.sign-values = negative_))
INVAR ((sv3way.outputset.pressure.sign-values = zero_) <-> (branch2.input.pressure.sign-values = zero_))
INVAR ((sv3way.outputset.pressure.relative-values = high_) <-> (branch2.input.pressure.relative-values = high_))
INVAR ((sv3way.outputset.pressure.relative-values = nominal_) <-> (branch2.input.pressure.relative-values = nominal_))
INVAR ((sv3way.outputset.pressure.relative-values = low_) <-> (branch2.input.pressure.relative-values = low_))
INVAR ((sv3way.outputreset.pressure.sign-values = positive_) <-> (branch1.input.pressure.sign-values = positive_))
INVAR ((sv3way.outputreset.pressure.sign-values = negative_) <-> (branch1.input.pressure.sign-values = negative_))
INVAR ((sv3way.outputreset.pressure.sign-values = zero_) <-> (branch1.input.pressure.sign-values = zero_))
INVAR ((sv3way.outputreset.pressure.relative-values = high_) <-> (branch1.input.pressure.relative-values = high_))
INVAR ((sv3way.outputreset.pressure.relative-values = nominal_) <-> (branch1.input.pressure.relative-values = nominal_))
INVAR ((sv3way.outputreset.pressure.relative-values = low_) <-> (branch1.input.pressure.relative-values = low_))
INVAR ((input.pressure.sign-values = positive_) <-> (sv3way.input.pressure.sign-values = positive_))
INVAR ((input.pressure.sign-values = negative_) <-> (sv3way.input.pressure.sign-values = negative_))
INVAR ((input.pressure.sign-values = zero_) <-> (sv3way.input.pressure.sign-values = zero_))
INVAR ((input.pressure.relative-values = high_) <-> (sv3way.input.pressure.relative-values = high_))
INVAR ((input.pressure.relative-values = nominal_) <-> (sv3way.input.pressure.relative-values = nominal_))
INVAR ((input.pressure.relative-values = low_) <-> (sv3way.input.pressure.relative-values = low_))
INVAR ((output.pressure.sign-values = zero_) -> !(output.pressure.relative-values = high_))
INVAR !(output.pressure.sign-values = negative_)
INVAR ((input.pressure.sign-values = zero_) -> !(input.pressure.relative-values = high_))
INVAR !(input.pressure.sign-values = negative_)



MODULE sp 
VAR
  h2_level : {low_, nominal_, high_};
  co2_level : {low_, nominal_, high_};
  _mode : {nominal_};
DEFINE
  _broken := 0;
  -- _brokencount := _broken;
  -- _brokenproba := 0;
INIT (_mode = nominal_)
TRANS ((_mode = nominal_) -> (next(_mode) = nominal_))



MODULE heater 
VAR
  cmdin : {on_, off_, no-command_};
  current : {off_, low_, nominal_, high_};
  heatout : {off_, low_, nominal_, high_, unknown_};
  heaterstatus : {on_, off_};
  _mode : {onstate_, offstate_, failed_off_, failed-high_, failed-low_, unrecoverable_fault_};
DEFINE
  _fault_modes := {failed_off_, failed-high_, failed-low_, unrecoverable_fault_};
  _broken := (_mode in _fault_modes);
  -- _brokencount := _broken;
  -- _brokenproba := case (_mode = failed_off_) : 3; (_mode = failed-high_) : 3; (_mode = failed-low_) : 3; (_mode = unrecoverable_fault_) : 4; 1 : 0; esac;
INIT (_mode = offstate_)
TRANS (((_mode = onstate_) -> (next(_mode) in _fault_modes)) | (((_mode = onstate_) & (cmdin = off_)) -> (next(_mode) = offstate_)))
TRANS (((_mode = onstate_) -> (next(_mode) in _fault_modes)) | (((_mode = onstate_) & !(cmdin = off_)) -> (next(_mode) = onstate_)))
TRANS (((_mode = offstate_) -> (next(_mode) in _fault_modes)) | (((_mode = offstate_) & (cmdin = on_)) -> (next(_mode) = onstate_)))
TRANS (((_mode = failed_off_) -> (next(_mode) in _fault_modes)) | ((_mode = failed_off_) -> (next(_mode) = failed_off_)))
TRANS (((_mode = failed-high_) -> (next(_mode) in _fault_modes)) | (((_mode = failed-high_) & (cmdin = off_)) -> (next(_mode) = failed_off_)))
TRANS (((_mode = failed-high_) -> (next(_mode) in _fault_modes)) | (((_mode = failed-high_) & !(cmdin = off_)) -> (next(_mode) = failed-high_)))
TRANS (((_mode = failed-low_) -> (next(_mode) in _fault_modes)) | (((_mode = failed-low_) & (cmdin = off_)) -> (next(_mode) = failed_off_)))
TRANS (((_mode = failed-low_) -> (next(_mode) in _fault_modes)) | (((_mode = failed-low_) & !(cmdin = off_)) -> (next(_mode) = failed-low_)))
TRANS (((_mode = unrecoverable_fault_) -> (next(_mode) in _fault_modes)) | ((_mode = unrecoverable_fault_) -> (next(_mode) = unrecoverable_fault_)))
INVAR ((_mode = onstate_) -> ((current = nominal_) & (heatout = nominal_) & (heaterstatus = on_)))
INVAR ((_mode = offstate_) -> ((current = off_) & (heatout = off_) & (heaterstatus = off_)))
INVAR ((_mode = failed_off_) -> ((current = off_) & (heatout = off_) & (heaterstatus = off_)))
INVAR ((_mode = failed-high_) -> (((current = high_) | (current = nominal_)) & (heatout = high_) & (heaterstatus = on_)))
INVAR ((_mode = failed-low_) -> ((current = low_) & (heatout = low_) & (heaterstatus = on_)))




MODULE current_sensor 
VAR
  currentin : {off_, low_, nominal_, high_};
  current : {off_, low_, nominal_, high_};
  _mode : {nominal-operation_, current_sensor_fault_};
DEFINE
  _fault_modes := {current_sensor_fault_};
  _broken := (_mode in _fault_modes);
  -- _brokencount := _broken;
  -- _brokenproba := case (_mode = current_sensor_fault_) : 3; 1 : 0; esac;
INIT (_mode = nominal-operation_)
TRANS (((_mode = nominal-operation_) -> (next(_mode) in _fault_modes)) | ((_mode = nominal-operation_) -> (next(_mode) = nominal-operation_)))
TRANS ((_mode = current_sensor_fault_) -> (next(_mode) = current_sensor_fault_))
INVAR ((_mode = nominal-operation_) -> (currentin = current))




MODULE heater_module 
VAR
  heatout : {off_, low_, nominal_, high_, unknown_};
-- STRUCTURE
  heater : heater;
  currentsensor : current_sensor;
DEFINE
  _broken := (currentsensor._broken | heater._broken);
  -- _brokencount := (currentsensor._brokencount + heater._brokencount);
  -- _brokenproba := (currentsensor._brokenproba + heater._brokenproba);
INVAR (heater.heatout = heatout)
INVAR (heater.current = currentsensor.currentin)




MODULE heater-controller 
VAR
  heatout : {off_, low_, nominal_, high_, unknown_};
-- STRUCTURE
  hr2 : heater_module;
  hr1 : heater_module;
DEFINE
  _broken := (hr1._broken | hr2._broken);
  -- _brokencount := (hr1._brokencount + hr2._brokencount);
  -- _brokenproba := (hr1._brokenproba + hr2._brokenproba);
INVAR ((hr2.heater.heaterstatus = on_) -> (((hr1.heater.heaterstatus = off_) -> (heatout = hr2.heater.heatout)) & (!(hr1.heater.heaterstatus = off_) -> ((((hr2.heater.heatout = low_) & (hr1.heater.heatout = low_)) -> (heatout = unknown_)) & (!((hr2.heater.heatout = low_) & (hr1.heater.heatout = low_)) -> (heatout = high_))))))
INVAR (!(hr2.heater.heaterstatus = on_) -> (((hr1.heater.heaterstatus = on_) -> (heatout = hr1.heater.heatout)) & (!(hr1.heater.heaterstatus = on_) -> (heatout = off_))))




MODULE reactor 
VAR
  heatin : {off_, low_, nominal_, high_, unknown_};
  rate_of_temp_change : {low_, nominal_, high_};
  tempchange : {zero_, positive_, negative_};
  reactor_temp : {low_, nominal_, high_};
  reactorstate : {cold_, warming_, steadystate_, cooling_};
  _mode : {nominal-operation_};
DEFINE
  _broken := 0;
  -- _brokencount := _broken;
  -- _brokenproba := 0;
INIT (_mode = nominal-operation_)
INIT (reactorstate = cold_)
TRANS ((_mode = nominal-operation_) -> (next(_mode) = nominal-operation_))
INVAR ((_mode = nominal-operation_) -> (((heatin = nominal_) -> ((reactor_temp = nominal_) & (tempchange = zero_))) & (!(heatin = nominal_) -> (((heatin = high_) -> (tempchange = positive_)) & (!(heatin = high_) -> (tempchange = negative_))))))




MODULE temperature_sensor 
VAR
  tempin : {low_, nominal_, high_};
  temperature : {low_, nominal_, high_};
  _mode : {nominal-operation_, temp_sensor_fault_};
DEFINE
  _fault_modes := {temp_sensor_fault_};
  _broken := (_mode in _fault_modes);
  -- _brokencount := _broken;
  -- _brokenproba := case (_mode = temp_sensor_fault_) : 3; 1 : 0; esac;
INIT (_mode = nominal-operation_)
TRANS (((_mode = nominal-operation_) -> (next(_mode) in _fault_modes)) | ((_mode = nominal-operation_) -> (next(_mode) = nominal-operation_)))
TRANS ((_mode = temp_sensor_fault_) -> (next(_mode) = temp_sensor_fault_))
INVAR ((_mode = nominal-operation_) -> (tempin = temperature))



MODULE rwgs_module 
VAR
  heatin : {off_, low_, nominal_, high_, unknown_};
  tempchange : {zero_, positive_, negative_};
  reactor_temp : {low_, nominal_, high_};
-- STRUCTURE
  heatctl : heater-controller;
  reactor : reactor;
  t1 : temperature_sensor;
  t2 : temperature_sensor;
  t3 : temperature_sensor;
DEFINE
  _broken := (t3._broken | t2._broken | t1._broken | reactor._broken | heatctl._broken);
  -- _brokencount := (t3._brokencount + t2._brokencount + t1._brokencount + reactor._brokencount + heatctl._brokencount);
  -- _brokenproba := (t3._brokenproba + t2._brokenproba + t1._brokenproba + reactor._brokenproba + heatctl._brokenproba);
INVAR (reactor_temp = t3.tempin)
INVAR (reactor_temp = t2.tempin)
INVAR (reactor_temp = t1.tempin)
INVAR (reactor_temp = reactor.reactor_temp)
INVAR (tempchange = reactor.tempchange)
INVAR (heatin = reactor.heatin)
INVAR (heatin = heatctl.heatout)



MODULE tank 
VAR
  flow_in : {on_, off_};
  relative_flow-magnitude : {high_in_, high_out_, equal_};
  flow_out : {on_, off_};
  level_switch : {empty_, full_, inbetween_};
  change : {increasing_, decreasing_, steady_};
  _mode : {nominal_};
DEFINE
  _broken := 0;
  -- _brokencount := _broken;
  -- _brokenproba := 0;
INIT (_mode = nominal_) -- Force component to start in a nominal mode
TRANS ((_mode = nominal_) -> (next(_mode) = nominal_))
INVAR ((change = steady_) <-> (((flow_in = off_) & (flow_out = off_)) | ((relative_flow-magnitude = equal_) & ((flow_out = on_) & (flow_in = on_)))))
INVAR ((change = increasing_) <-> (((flow_in = on_) & (flow_out = off_)) | ((relative_flow-magnitude = high_in_) & ((flow_out = on_) & (flow_in = on_)))))
INVAR ((change = decreasing_) <-> (((flow_in = off_) & (flow_out = on_)) | ((relative_flow-magnitude = high_out_) & ((flow_out = on_) & (flow_in = on_)))))
INVAR ((level_switch = full_) -> !(change = increasing_))
INVAR ((level_switch = empty_) -> !(change = decreasing_))



MODULE waterflowmodule 
VAR
  pressure : {on_, off_};
  flow_in : {on_, off_};
  flow_out : {on_, off_};
-- STRUCTURE
  sv8 : solenoidvalve3way;
  sv9 : solenoidvalve2way;
  sv10 : solenoidvalve2way;
DEFINE
  _broken := (sv10._broken | sv9._broken | sv8._broken);
  -- _brokencount := (sv10._brokencount + sv9._brokencount + sv8._brokencount);
  -- _brokenproba := (sv10._brokenproba + sv9._brokenproba + sv8._brokenproba);
INVAR (((sv9.output.pressure.sign-values = positive_) | (sv10.output.pressure.sign-values = positive_)) -> ((flow_in = on_) & (flow_out = on_)))
INVAR (!((sv9.output.pressure.sign-values = positive_) | (sv10.output.pressure.sign-values = positive_)) -> ((flow_in = off_) & (flow_out = off_)))
INVAR ((pressure = off_) -> (sv8.input.pressure.sign-values = zero_))
INVAR ((pressure = on_) -> (sv8.input.pressure.sign-values = positive_))
INVAR ((sv8.outputset.pressure.sign-values = positive_) <-> (sv10.input.pressure.sign-values = positive_))
INVAR ((sv8.outputset.pressure.sign-values = negative_) <-> (sv10.input.pressure.sign-values = negative_))
INVAR ((sv8.outputset.pressure.sign-values = zero_) <-> (sv10.input.pressure.sign-values = zero_))
INVAR ((sv8.outputset.pressure.relative-values = high_) <-> (sv10.input.pressure.relative-values = high_))
INVAR ((sv8.outputset.pressure.relative-values = nominal_) <-> (sv10.input.pressure.relative-values = nominal_))
INVAR ((sv8.outputset.pressure.relative-values = low_) <-> (sv10.input.pressure.relative-values = low_))
INVAR ((sv8.outputreset.pressure.sign-values = positive_) <-> (sv9.input.pressure.sign-values = positive_))
INVAR ((sv8.outputreset.pressure.sign-values = negative_) <-> (sv9.input.pressure.sign-values = negative_))
INVAR ((sv8.outputreset.pressure.sign-values = zero_) <-> (sv9.input.pressure.sign-values = zero_))
INVAR ((sv8.outputreset.pressure.relative-values = high_) <-> (sv9.input.pressure.relative-values = high_))
INVAR ((sv8.outputreset.pressure.relative-values = nominal_) <-> (sv9.input.pressure.relative-values = nominal_))
INVAR ((sv8.outputreset.pressure.relative-values = low_) <-> (sv9.input.pressure.relative-values = low_))




MODULE pump 
VAR
  cmd_in : {on_, off_, no-command_};
  pressure_in : {on_, off_};
  flow_in : {on_, off_};
  status : {on_, off_};
  pressure : {off_, low_, high_};
  flow_out : {on_, off_};
  _mode : {on_, off_, stuck_on_, stuck_off_};
DEFINE
  _fault_modes := {stuck_on_, stuck_off_};
  _broken := (_mode in _fault_modes);
  -- _brokencount := _broken;
  -- _brokenproba := case (_mode = stuck_on_) : 1; (_mode = stuck_off_) : 1; 1 : 0; esac;
INIT (_mode = off_)
TRANS (((_mode = on_) -> (next(_mode) in _fault_modes)) | (((_mode = on_) & (cmd_in = off_)) -> (next(_mode) = off_)))
TRANS (((_mode = on_) -> (next(_mode) in _fault_modes)) | (((_mode = on_) & !(cmd_in = off_)) -> (next(_mode) = on_)))
TRANS (((_mode = off_) -> (next(_mode) in _fault_modes)) | (((_mode = off_) & (cmd_in = on_)) -> (next(_mode) = on_)))
TRANS (((_mode = off_) -> (next(_mode) in _fault_modes)) | (((_mode = off_) & !(cmd_in = on_)) -> (next(_mode) = off_)))
TRANS (((_mode = stuck_on_) -> (next(_mode) in _fault_modes)) | ((_mode = stuck_on_) -> (next(_mode) = stuck_on_)))
TRANS (((_mode = stuck_off_) -> (next(_mode) in _fault_modes)) | ((_mode = stuck_off_) -> (next(_mode) = stuck_off_)))
INVAR (((status = on_) & (pressure_in = on_)) <-> ((flow_in = on_) & (flow_out = on_)))
INVAR ((flow_in = on_) <-> !(pressure = off_))
INVAR ((_mode = on_) -> (status = on_))
INVAR ((_mode = off_) -> ((status = off_) & (flow_in = off_) & (flow_out = off_)))
INVAR ((_mode = stuck_on_) -> (status = on_))
INVAR ((_mode = stuck_off_) -> ((status = off_) & (flow_in = off_) & (flow_out = off_)))



MODULE electrolyzer 
VAR
  cmd_in : {on_, off_, no-command_};
  water_flow_in : {on_, off_};
  status : {on_, off_};
  h2-pressure : {low_, nominal_, high_};
  h2_flow : {low_, nominal_, high_};
  o2_flow : {low_, nominal_, high_};
  temp : {low_, nominal_, high_};
  water_flow_out : {on_, off_};
  _mode : {on_, off_, stuck_on_, stuck_off_, low_output_, high_output_};
DEFINE
  _fault_modes := {stuck_on_, stuck_off_, low_output_, high_output_};
  _broken := (_mode in _fault_modes);
  -- _brokencount := _broken;
  -- _brokenproba := case (_mode = stuck_on_) : 1; (_mode = stuck_off_) : 1; (_mode = low_output_) : 1; (_mode = high_output_) : 1; 1 : 0; esac;
INIT (_mode = off_)
TRANS (((_mode = on_) -> (next(_mode) in _fault_modes)) | (((_mode = on_) & (cmd_in = off_)) -> (next(_mode) = off_)))
TRANS (((_mode = on_) -> (next(_mode) in _fault_modes)) | (((_mode = on_) & !(cmd_in = off_)) -> (next(_mode) = on_)))
TRANS (((_mode = off_) -> (next(_mode) in _fault_modes)) | (((_mode = off_) & (cmd_in = on_)) -> (next(_mode) = on_)))
TRANS (((_mode = off_) -> (next(_mode) in _fault_modes)) | (((_mode = off_) & !(cmd_in = on_)) -> (next(_mode) = off_)))
TRANS (((_mode = stuck_on_) -> (next(_mode) in _fault_modes)) | ((_mode = stuck_on_) -> (next(_mode) = stuck_on_)))
TRANS (((_mode = stuck_off_) -> (next(_mode) in _fault_modes)) | ((_mode = stuck_off_) -> (next(_mode) = stuck_off_)))
TRANS (((_mode = low_output_) -> (next(_mode) in _fault_modes)) | ((_mode = low_output_) -> (next(_mode) = low_output_)))
TRANS (((_mode = high_output_) -> (next(_mode) in _fault_modes)) | ((_mode = high_output_) -> (next(_mode) = high_output_)))
INVAR (water_flow_in = water_flow_out)
INVAR (((water_flow_in = on_) & (status = on_)) -> (temp = nominal_))
INVAR (((water_flow_in = off_) & (status = on_)) -> (temp = high_))
INVAR (((water_flow_in = on_) & (status = off_)) -> (temp = low_))
INVAR ((_mode = on_) -> ((status = on_) & (h2-pressure = nominal_) & (h2_flow = nominal_) & (o2_flow = nominal_)))
INVAR ((_mode = off_) -> ((status = off_) & (h2-pressure = low_) & (h2_flow = low_) & (o2_flow = low_)))
INVAR ((_mode = stuck_on_) -> ((status = on_) & (h2-pressure = nominal_) & (h2_flow = nominal_) & (o2_flow = nominal_)))
INVAR ((_mode = stuck_off_) -> ((status = off_) & (h2-pressure = low_) & (h2_flow = low_) & (o2_flow = low_)))
INVAR ((_mode = low_output_) -> ((status = on_) & (h2_flow = low_) & (o2_flow = low_)))
INVAR ((_mode = high_output_) -> ((status = on_) & (h2_flow = high_) & (o2_flow = high_)))



MODULE change_sensor 
VAR
  change : {increasing_, decreasing_, steady_};
  indicated_change : {increasing_, decreasing_, steady_};
  _mode : {normal_, failed_};
DEFINE
  _fault_modes := {failed_};
  _broken := (_mode in _fault_modes);
  -- _brokencount := _broken;
  -- _brokenproba := case (_mode = failed_) : 1; 1 : 0; esac;
INIT (_mode = normal_)
TRANS (((_mode = normal_) -> (next(_mode) in _fault_modes)) | ((_mode = normal_) -> (next(_mode) = normal_)))
TRANS ((_mode = failed_) -> (next(_mode) = failed_))
INVAR ((_mode = normal_) -> (change = indicated_change))



MODULE level_sensor 
VAR
  level : {empty_, full_, inbetween_};
  indicated_level : {empty_, full_, inbetween_};
  _mode : {normal_, failed_};
DEFINE
  _fault_modes := {failed_};
  _broken := (_mode in _fault_modes);
  -- _brokencount := _broken;
  -- _brokenproba := case (_mode = failed_) : 1; 1 : 0; esac;
INIT (_mode = normal_)
TRANS (((_mode = normal_) -> (next(_mode) in _fault_modes)) | ((_mode = normal_) -> (next(_mode) = normal_)))
TRANS ((_mode = failed_) -> (next(_mode) = failed_))
INVAR ((_mode = normal_) -> (level = indicated_level))



MODULE water-pressure-transducer 
VAR
  pres : {off_, low_, high_};
  indicated_pres : {off_, low_, high_};
  _mode : {normal_, failed_};
DEFINE
  _fault_modes := {failed_};
  _broken := (_mode in _fault_modes);
  -- _brokencount := _broken;
  -- _brokenproba := case (_mode = failed_) : 1; 1 : 0; esac;
INIT (_mode = normal_)
TRANS (((_mode = normal_) -> (next(_mode) in _fault_modes)) | ((_mode = normal_) -> (next(_mode) = normal_)))
TRANS ((_mode = failed_) -> (next(_mode) = failed_))
INVAR ((_mode = normal_) -> (pres = indicated_pres))



MODULE pressure-transducer 
VAR
  pres : {low_, nominal_, high_};
  indicated_pres : {low_, nominal_, high_};
  _mode : {normal_, failed_};
DEFINE
  _fault_modes := {failed_};
  _broken := (_mode in _fault_modes);
  -- _brokencount := _broken;
  -- _brokenproba := case (_mode = failed_) : 1; 1 : 0; esac;
INIT (_mode = normal_)
TRANS (((_mode = normal_) -> (next(_mode) in _fault_modes)) | ((_mode = normal_) -> (next(_mode) = normal_)))
TRANS ((_mode = failed_) -> (next(_mode) = failed_))
INVAR ((_mode = normal_) -> (pres = indicated_pres))



MODULE tach 
VAR
  revs_in : {on_, off_};
  indicated_revs : {on_, off_};
  _mode : {normal_, failed_};
DEFINE
  _fault_modes := {failed_};
  _broken := (_mode in _fault_modes);
  -- _brokencount := _broken;
  -- _brokenproba := case (_mode = failed_) : 1; 1 : 0; esac;
INIT (_mode = normal_)
TRANS (((_mode = normal_) -> (next(_mode) in _fault_modes)) | ((_mode = normal_) -> (next(_mode) = normal_)))
TRANS ((_mode = failed_) -> (next(_mode) = failed_))
INVAR ((_mode = normal_) -> (revs_in = indicated_revs))



MODULE top-level 
VAR
  reactor_conv : {low_, nominal_, high_};
  condenser_accum : {low_, nominal_, high_};
-- STRUCTURE
  compressor : switch;
  h2o : flow;
  h2tank : gas_cylinder;
  co2tank : gas_cylinder;
  h2 : flowmodule;
  co2 : flowmodule;
  sp1 : sp;
  sp2 : sp;
  sp3 : sp;
  sp4 : sp;
  sp7 : sp;
  reactor : rwgs_module;
  rwgs_trap : tank;
  h2_trap : tank;
  o2_trap : tank;
  drain : waterflowmodule;
  electro_pump : pump;
  rwgs_pump : pump;
  electro : electrolyzer;
  o2chg : change_sensor;
  h2chg : change_sensor;
  rwgschg : change_sensor;
  o2lvl : level_sensor;
  h2lvl : level_sensor;
  rwgslvl : level_sensor;
  p10 : water-pressure-transducer;
  p9 : pressure-transducer;
  t8 : temperature_sensor;
  t7 : temperature_sensor;
  ep1 : tach;
  rp1 : tach;
DEFINE
  _broken := (rp1._broken | ep1._broken | t7._broken | t8._broken | p9._broken | p10._broken | rwgslvl._broken | h2lvl._broken | o2lvl._broken | rwgschg._broken | h2chg._broken | o2chg._broken | electro._broken | rwgs_pump._broken | electro_pump._broken | drain._broken | o2_trap._broken | h2_trap._broken | rwgs_trap._broken | reactor._broken | sp7._broken | sp4._broken | sp3._broken | sp2._broken | sp1._broken | co2._broken | h2._broken | co2tank._broken | h2tank._broken | h2o._broken | compressor._broken);
  -- _brokencount := (rp1._brokencount + ep1._brokencount + t7._brokencount + t8._brokencount + p9._brokencount + p10._brokencount + rwgslvl._brokencount + h2lvl._brokencount + o2lvl._brokencount + rwgschg._brokencount + h2chg._brokencount + o2chg._brokencount + electro._brokencount + rwgs_pump._brokencount + electro_pump._brokencount + drain._brokencount + o2_trap._brokencount + h2_trap._brokencount + rwgs_trap._brokencount + reactor._brokencount + sp7._brokencount + sp4._brokencount + sp3._brokencount + sp2._brokencount + sp1._brokencount + co2._brokencount + h2._brokencount + co2tank._brokencount + h2tank._brokencount + h2o._brokencount + compressor._brokencount);
  -- _brokenproba := (rp1._brokenproba + ep1._brokenproba + t7._brokenproba + t8._brokenproba + p9._brokenproba + p10._brokenproba + rwgslvl._brokenproba + h2lvl._brokenproba + o2lvl._brokenproba + rwgschg._brokenproba + h2chg._brokenproba + o2chg._brokenproba + electro._brokenproba + rwgs_pump._brokenproba + electro_pump._brokenproba + drain._brokenproba + o2_trap._brokenproba + h2_trap._brokenproba + rwgs_trap._brokenproba + reactor._brokenproba + sp7._brokenproba + sp4._brokenproba + sp3._brokenproba + sp2._brokenproba + sp1._brokenproba + co2._brokenproba + h2._brokenproba + co2tank._brokenproba + h2tank._brokenproba + h2o._brokenproba + compressor._brokenproba);
INVAR ((reactor.reactor.reactorstate = steadystate_) -> (rwgs_trap.flow_in = on_))
INVAR (!(reactor.reactor.reactorstate = steadystate_) -> (rwgs_trap.flow_in = off_))
INVAR ((rwgs_trap.flow_out = on_) -> (rwgs_trap.relative_flow-magnitude = high_out_))
INVAR (((electro.water_flow_out = on_) & (drain.flow_out = on_)) -> ((o2_trap.relative_flow-magnitude = high_in_) & (electro_pump.pressure = high_)))
INVAR (((electro.status = off_) & !(drain.flow_out = on_)) -> (o2_trap.relative_flow-magnitude = equal_))
INVAR (((electro.status = on_) & (electro.water_flow_out = on_) & !(drain.flow_out = on_)) -> (o2_trap.relative_flow-magnitude = high_out_))
INVAR ((!(o2_trap.level_switch = empty_) | (drain.flow_out = on_)) <-> (electro_pump.pressure_in = on_))
INVAR (((o2_trap.flow_out = on_) | (drain.flow_out = on_)) <-> (electro_pump.flow_in = on_))
INVAR (!(rwgs_trap.level_switch = empty_) <-> (rwgs_pump.pressure_in = on_))
INVAR (!(h2_trap.level_switch = empty_) <-> (drain.pressure = on_))
INVAR ((((h2.flowout.relative-values = high_) & ((co2.flowout.relative-values = nominal_) | (co2.flowout.relative-values = low_))) | ((h2.flowout.relative-values = nominal_) & (co2.flowout.relative-values = low_))) -> (sp1.h2_level = high_))
INVAR ((((co2.flowout.relative-values = high_) & ((h2.flowout.relative-values = nominal_) | (h2.flowout.relative-values = low_))) | ((co2.flowout.relative-values = nominal_) & (h2.flowout.relative-values = low_))) -> (sp1.co2_level = high_))
INVAR (((reactor.t2.temperature = low_) | (h2o.flow_in = high_) | (compressor.state = off_)) -> ((!(h2.flowout.relative-values = low_) -> (sp3.h2_level = high_)) & (!(co2.flowout.relative-values = low_) -> (sp3.co2_level = high_))))
INVAR ((((h2.flowout.relative-values = high_) & ((co2.flowout.relative-values = nominal_) | (co2.flowout.relative-values = low_))) | ((h2.flowout.relative-values = nominal_) & (co2.flowout.relative-values = low_))) -> (sp3.h2_level = high_))
INVAR ((((co2.flowout.relative-values = high_) & ((h2.flowout.relative-values = nominal_) | (h2.flowout.relative-values = low_))) | ((co2.flowout.relative-values = nominal_) & (h2.flowout.relative-values = low_))) -> (sp3.co2_level = high_))
INVAR ((h2.flowout.relative-values = high_) -> (sp3.h2_level = high_))
INVAR ((co2.flowout.relative-values = high_) -> (sp3.co2_level = high_))
INVAR ((reactor.t2.temperature = high_) -> (reactor_conv = high_))
INVAR (((compressor.state = off_) & !(reactor.t2.temperature = low_) & (co2.flowout.relative-values = h2.flowout.relative-values) & !(h2.flowout.relative-values = low_)) -> (reactor_conv = high_))
INVAR ((reactor.t2.temperature = low_) -> (reactor_conv = low_))
INVAR ((h2o.flow_in = high_) -> (reactor_conv = low_))
INVAR (((compressor.state = off_) | (co2.flowout.relative-values = low_) | (h2.flowout.relative-values = low_) | (h2o.flow_in = high_) | (reactor.t2.temperature = low_)) -> (condenser_accum = low_))
INVAR (((compressor.state = on_) & (co2.flowout.relative-values = nominal_) & (h2.flowout.relative-values = nominal_) & (co2.flowout.sign-values = positive_) & (h2.flowout.sign-values = positive_) & (h2o.flow_in = nominal_) & (reactor.t2.temperature = nominal_)) -> ((condenser_accum = nominal_) & (reactor_conv = nominal_) & (sp3.co2_level = nominal_) & (sp3.h2_level = nominal_) & (sp1.co2_level = nominal_) & (sp1.h2_level = nominal_)))
INVAR (electro.temp = t8.tempin)
INVAR (electro.temp = t7.tempin)
INVAR (electro.h2-pressure = p9.pres)
INVAR (electro_pump.pressure = p10.pres)
INVAR (h2_trap.level_switch = h2lvl.level)
INVAR (o2_trap.level_switch = o2lvl.level)
INVAR (rwgs_trap.level_switch = rwgslvl.level)
INVAR (h2_trap.change = h2chg.change)
INVAR (o2_trap.change = o2chg.change)
INVAR (rwgs_trap.change = rwgschg.change)
INVAR (electro.water_flow_out = o2_trap.flow_in)
INVAR (electro_pump.flow_out = electro.water_flow_in)
INVAR (h2_trap.flow_out = drain.flow_in)
INVAR (rwgs_pump.flow_out = h2_trap.flow_in)
INVAR (rwgs_trap.flow_out = rwgs_pump.flow_in)
INVAR (electro_pump.status = ep1.revs_in)
INVAR (rwgs_pump.status = rp1.revs_in)
INVAR ((co2tank.output.pressure.sign-values = positive_) <-> (co2.input.pressure.sign-values = positive_))
INVAR ((co2tank.output.pressure.sign-values = negative_) <-> (co2.input.pressure.sign-values = negative_))
INVAR ((co2tank.output.pressure.sign-values = zero_) <-> (co2.input.pressure.sign-values = zero_))
INVAR ((co2tank.output.pressure.relative-values = high_) <-> (co2.input.pressure.relative-values = high_))
INVAR ((co2tank.output.pressure.relative-values = nominal_) <-> (co2.input.pressure.relative-values = nominal_))
INVAR ((co2tank.output.pressure.relative-values = low_) <-> (co2.input.pressure.relative-values = low_))
INVAR ((h2tank.output.pressure.sign-values = positive_) <-> (h2.input.pressure.sign-values = positive_))
INVAR ((h2tank.output.pressure.sign-values = negative_) <-> (h2.input.pressure.sign-values = negative_))
INVAR ((h2tank.output.pressure.sign-values = zero_) <-> (h2.input.pressure.sign-values = zero_))
INVAR ((h2tank.output.pressure.relative-values = high_) <-> (h2.input.pressure.relative-values = high_))
INVAR ((h2tank.output.pressure.relative-values = nominal_) <-> (h2.input.pressure.relative-values = nominal_))
INVAR ((h2tank.output.pressure.relative-values = low_) <-> (h2.input.pressure.relative-values = low_))




MODULE main
VAR
-- STRUCTURE
  testbed : top-level;

DEFINE
  _broken := testbed._broken;
  -- _brokencount := testbed._brokencount;
  -- _brokenproba := testbed._brokenproba;
--  _commandcount := (!(testbed.h2.branch1.fc.cmdin = no-command_) + !(testbed.h2.branch1.sv2way.cmdin = no-command_) + !(testbed.h2.branch2.fc.cmdin = no-command_) + !(testbed.h2.branch2.sv2way.cmdin = no-command_) + !(testbed.h2.sv3way.cmdin = no-command_) + !(testbed.co2.branch1.fc.cmdin = no-command_) + !(testbed.co2.branch1.sv2way.cmdin = no-command_) + !(testbed.co2.branch2.fc.cmdin = no-command_) + !(testbed.co2.branch2.sv2way.cmdin = no-command_) + !(testbed.co2.sv3way.cmdin = no-command_) + !(testbed.h2o.a.command_in = no_cmd_) + !(testbed.h2o.b.command_in = no_cmd_) + !(testbed.compressor.command_in = no_cmd_) + !(testbed.drain.sv8.cmdin = no-command_) + !(testbed.drain.sv9.cmdin = no-command_) + !(testbed.drain.sv10.cmdin = no-command_) + !(testbed.electro.cmd_in = no-command_) + !(testbed.electro_pump.cmd_in = no-command_) + !(testbed.rwgs_pump.cmd_in = no-command_) + !(testbed.reactor.heatctl.hr1.heater.cmdin = no-command_) + !(testbed.reactor.heatctl.hr2.heater.cmdin = no-command_));
SPEC
  EF (testbed.compressor._mode = off_)
SPEC
  EF (testbed.compressor._mode = on_)
SPEC
  EF (testbed.h2o.a._mode = off_)
SPEC
  EF (testbed.h2o.a._mode = on_)
SPEC
  EF (testbed.h2o.b._mode = off_)
SPEC
  EF (testbed.h2o.b._mode = on_)
SPEC
  EF (testbed.h2tank._mode = unknown_tank_fault_)
SPEC
  EF (testbed.h2tank._mode = not_empty_)
SPEC
  EF (testbed.co2tank._mode = unknown_tank_fault_)
SPEC
  EF (testbed.co2tank._mode = not_empty_)
SPEC
  EF (testbed.h2.sv3way._mode = unknown_valvefault_)
SPEC
  EF (testbed.h2.sv3way._mode = unexpectedly_betweensetreset_)
SPEC
  EF (testbed.h2.sv3way._mode = unexpectedly_reset_)
SPEC
  EF (testbed.h2.sv3way._mode = unexpectedly_set_)
SPEC
  EF (testbed.h2.sv3way._mode = resetposn_)
SPEC
  EF (testbed.h2.sv3way._mode = setposn_)
SPEC
  EF (testbed.h2.branch1.fc._mode = unknown_valvefault_)
SPEC
  EF (testbed.h2.branch1.fc._mode = unexpectedly_closed_)
SPEC
  EF (testbed.h2.branch1.fc._mode = unexpectedly_open_)
SPEC
  EF (testbed.h2.branch1.fc._mode = unexpected-lowflow_)
SPEC
  EF (testbed.h2.branch1.fc._mode = unexpected-highflow_)
SPEC
  EF (testbed.h2.branch1.fc._mode = closedposn_)
SPEC
  EF (testbed.h2.branch1.fc._mode = openposn_)
SPEC
  EF (testbed.h2.branch1.flowsensor._mode = flow-mass_fault_)
SPEC
  EF (testbed.h2.branch1.flowsensor._mode = nominal-operation_)
SPEC
  EF (testbed.h2.branch1.sv2way._mode = unknown_valvefault_)
SPEC
  EF (testbed.h2.branch1.sv2way._mode = unexpectedly_open_)
SPEC
  EF (testbed.h2.branch1.sv2way._mode = unexpectedly_closed_)
SPEC
  EF (testbed.h2.branch1.sv2way._mode = closedposn_)
SPEC
  EF (testbed.h2.branch1.sv2way._mode = openposn_)
SPEC
  EF (testbed.h2.branch2.fc._mode = unknown_valvefault_)
SPEC
  EF (testbed.h2.branch2.fc._mode = unexpectedly_closed_)
SPEC
  EF (testbed.h2.branch2.fc._mode = unexpectedly_open_)
SPEC
  EF (testbed.h2.branch2.fc._mode = unexpected-lowflow_)
SPEC
  EF (testbed.h2.branch2.fc._mode = unexpected-highflow_)
SPEC
  EF (testbed.h2.branch2.fc._mode = closedposn_)
SPEC
  EF (testbed.h2.branch2.fc._mode = openposn_)
SPEC
  EF (testbed.h2.branch2.flowsensor._mode = flow-mass_fault_)
SPEC
  EF (testbed.h2.branch2.flowsensor._mode = nominal-operation_)
SPEC
  EF (testbed.h2.branch2.sv2way._mode = unknown_valvefault_)
SPEC
  EF (testbed.h2.branch2.sv2way._mode = unexpectedly_open_)
SPEC
  EF (testbed.h2.branch2.sv2way._mode = unexpectedly_closed_)
SPEC
  EF (testbed.h2.branch2.sv2way._mode = closedposn_)
SPEC
  EF (testbed.h2.branch2.sv2way._mode = openposn_)
SPEC
  EF (testbed.co2.sv3way._mode = unknown_valvefault_)
SPEC
  EF (testbed.co2.sv3way._mode = unexpectedly_betweensetreset_)
SPEC
  EF (testbed.co2.sv3way._mode = unexpectedly_reset_)
SPEC
  EF (testbed.co2.sv3way._mode = unexpectedly_set_)
SPEC
  EF (testbed.co2.sv3way._mode = resetposn_)
SPEC
  EF (testbed.co2.sv3way._mode = setposn_)
SPEC
  EF (testbed.co2.branch1.fc._mode = unknown_valvefault_)
SPEC
  EF (testbed.co2.branch1.fc._mode = unexpectedly_closed_)
SPEC
  EF (testbed.co2.branch1.fc._mode = unexpectedly_open_)
SPEC
  EF (testbed.co2.branch1.fc._mode = unexpected-lowflow_)
SPEC
  EF (testbed.co2.branch1.fc._mode = unexpected-highflow_)
SPEC
  EF (testbed.co2.branch1.fc._mode = closedposn_)
SPEC
  EF (testbed.co2.branch1.fc._mode = openposn_)
SPEC
  EF (testbed.co2.branch1.flowsensor._mode = flow-mass_fault_)
SPEC
  EF (testbed.co2.branch1.flowsensor._mode = nominal-operation_)
SPEC
  EF (testbed.co2.branch1.sv2way._mode = unknown_valvefault_)
SPEC
  EF (testbed.co2.branch1.sv2way._mode = unexpectedly_open_)
SPEC
  EF (testbed.co2.branch1.sv2way._mode = unexpectedly_closed_)
SPEC
  EF (testbed.co2.branch1.sv2way._mode = closedposn_)
SPEC
  EF (testbed.co2.branch1.sv2way._mode = openposn_)
SPEC
  EF (testbed.co2.branch2.fc._mode = unknown_valvefault_)
SPEC
  EF (testbed.co2.branch2.fc._mode = unexpectedly_closed_)
SPEC
  EF (testbed.co2.branch2.fc._mode = unexpectedly_open_)
SPEC
  EF (testbed.co2.branch2.fc._mode = unexpected-lowflow_)
SPEC
  EF (testbed.co2.branch2.fc._mode = unexpected-highflow_)
SPEC
  EF (testbed.co2.branch2.fc._mode = closedposn_)
SPEC
  EF (testbed.co2.branch2.fc._mode = openposn_)
SPEC
  EF (testbed.co2.branch2.flowsensor._mode = flow-mass_fault_)
SPEC
  EF (testbed.co2.branch2.flowsensor._mode = nominal-operation_)
SPEC
  EF (testbed.co2.branch2.sv2way._mode = unknown_valvefault_)
SPEC
  EF (testbed.co2.branch2.sv2way._mode = unexpectedly_open_)
SPEC
  EF (testbed.co2.branch2.sv2way._mode = unexpectedly_closed_)
SPEC
  EF (testbed.co2.branch2.sv2way._mode = closedposn_)
SPEC
  EF (testbed.co2.branch2.sv2way._mode = openposn_)
SPEC
  EF (testbed.sp1._mode = nominal_)
SPEC
  EF (testbed.sp2._mode = nominal_)
SPEC
  EF (testbed.sp3._mode = nominal_)
SPEC
  EF (testbed.sp4._mode = nominal_)
SPEC
  EF (testbed.sp7._mode = nominal_)
SPEC
  EF (testbed.reactor.heatctl.hr2.heater._mode = unrecoverable_fault_)
SPEC
  EF (testbed.reactor.heatctl.hr2.heater._mode = failed-low_)
SPEC
  EF (testbed.reactor.heatctl.hr2.heater._mode = failed-high_)
SPEC
  EF (testbed.reactor.heatctl.hr2.heater._mode = failed_off_)
SPEC
  EF (testbed.reactor.heatctl.hr2.heater._mode = offstate_)
SPEC
  EF (testbed.reactor.heatctl.hr2.heater._mode = onstate_)
SPEC
  EF (testbed.reactor.heatctl.hr2.currentsensor._mode = current_sensor_fault_)
SPEC
  EF (testbed.reactor.heatctl.hr2.currentsensor._mode = nominal-operation_)
SPEC
  EF (testbed.reactor.heatctl.hr1.heater._mode = unrecoverable_fault_)
SPEC
  EF (testbed.reactor.heatctl.hr1.heater._mode = failed-low_)
SPEC
  EF (testbed.reactor.heatctl.hr1.heater._mode = failed-high_)
SPEC
  EF (testbed.reactor.heatctl.hr1.heater._mode = failed_off_)
SPEC
  EF (testbed.reactor.heatctl.hr1.heater._mode = offstate_)
SPEC
  EF (testbed.reactor.heatctl.hr1.heater._mode = onstate_)
SPEC
  EF (testbed.reactor.heatctl.hr1.currentsensor._mode = current_sensor_fault_)
SPEC
  EF (testbed.reactor.heatctl.hr1.currentsensor._mode = nominal-operation_)
SPEC
  EF (testbed.reactor.reactor._mode = nominal-operation_)
SPEC
  EF (testbed.reactor.t1._mode = temp_sensor_fault_)
SPEC
  EF (testbed.reactor.t1._mode = nominal-operation_)
SPEC
  EF (testbed.reactor.t2._mode = temp_sensor_fault_)
SPEC
  EF (testbed.reactor.t2._mode = nominal-operation_)
SPEC
  EF (testbed.reactor.t3._mode = temp_sensor_fault_)
SPEC
  EF (testbed.reactor.t3._mode = nominal-operation_)
SPEC
  EF (testbed.rwgs_trap._mode = nominal_)
SPEC
  EF (testbed.h2_trap._mode = nominal_)
SPEC
  EF (testbed.o2_trap._mode = nominal_)
SPEC
  EF (testbed.drain.sv8._mode = unknown_valvefault_)
SPEC
  EF (testbed.drain.sv8._mode = unexpectedly_betweensetreset_)
SPEC
  EF (testbed.drain.sv8._mode = unexpectedly_reset_)
SPEC
  EF (testbed.drain.sv8._mode = unexpectedly_set_)
SPEC
  EF (testbed.drain.sv8._mode = resetposn_)
SPEC
  EF (testbed.drain.sv8._mode = setposn_)
SPEC
  EF (testbed.drain.sv9._mode = unknown_valvefault_)
SPEC
  EF (testbed.drain.sv9._mode = unexpectedly_open_)
SPEC
  EF (testbed.drain.sv9._mode = unexpectedly_closed_)
SPEC
  EF (testbed.drain.sv9._mode = closedposn_)
SPEC
  EF (testbed.drain.sv9._mode = openposn_)
SPEC
  EF (testbed.drain.sv10._mode = unknown_valvefault_)
SPEC
  EF (testbed.drain.sv10._mode = unexpectedly_open_)
SPEC
  EF (testbed.drain.sv10._mode = unexpectedly_closed_)
SPEC
  EF (testbed.drain.sv10._mode = closedposn_)
SPEC
  EF (testbed.drain.sv10._mode = openposn_)
SPEC
  EF (testbed.electro_pump._mode = stuck_off_)
SPEC
  EF (testbed.electro_pump._mode = stuck_on_)
SPEC
  EF (testbed.electro_pump._mode = off_)
SPEC
  EF (testbed.electro_pump._mode = on_)
SPEC
  EF (testbed.rwgs_pump._mode = stuck_off_)
SPEC
  EF (testbed.rwgs_pump._mode = stuck_on_)
SPEC
  EF (testbed.rwgs_pump._mode = off_)
SPEC
  EF (testbed.rwgs_pump._mode = on_)
SPEC
  EF (testbed.electro._mode = high_output_)
SPEC
  EF (testbed.electro._mode = low_output_)
SPEC
  EF (testbed.electro._mode = stuck_off_)
SPEC
  EF (testbed.electro._mode = stuck_on_)
SPEC
  EF (testbed.electro._mode = off_)
SPEC
  EF (testbed.electro._mode = on_)
SPEC
  EF (testbed.o2chg._mode = failed_)
SPEC
  EF (testbed.o2chg._mode = normal_)
SPEC
  EF (testbed.h2chg._mode = failed_)
SPEC
  EF (testbed.h2chg._mode = normal_)
SPEC
  EF (testbed.rwgschg._mode = failed_)
SPEC
  EF (testbed.rwgschg._mode = normal_)
SPEC
  EF (testbed.o2lvl._mode = failed_)
SPEC
  EF (testbed.o2lvl._mode = normal_)
SPEC
  EF (testbed.h2lvl._mode = failed_)
SPEC
  EF (testbed.h2lvl._mode = normal_)
SPEC
  EF (testbed.rwgslvl._mode = failed_)
SPEC
  EF (testbed.rwgslvl._mode = normal_)
SPEC
  EF (testbed.p10._mode = failed_)
SPEC
  EF (testbed.p10._mode = normal_)
SPEC
  EF (testbed.p9._mode = failed_)
SPEC
  EF (testbed.p9._mode = normal_)
SPEC
  EF (testbed.t8._mode = temp_sensor_fault_)
SPEC
  EF (testbed.t8._mode = nominal-operation_)
SPEC
  EF (testbed.t7._mode = temp_sensor_fault_)
SPEC
  EF (testbed.t7._mode = nominal-operation_)
SPEC
  EF (testbed.ep1._mode = failed_)
SPEC
  EF (testbed.ep1._mode = normal_)
SPEC
  EF (testbed.rp1._mode = failed_)
SPEC
  EF (testbed.rp1._mode = normal_)

-- End of generation
