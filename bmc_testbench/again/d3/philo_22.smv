
-------------------------------------------------------------------------------
-- These modules model a version of the well known dining philosophers problem
-- it is based on an implemementation proposed by D. Hoffman from East Carolina
-- University in the scope of SENG6250, session of fall 2015.
-- The video is available online at : https://youtu.be/JBESxiZ5Wao
-------------------------------------------------------------------------------
MODULE main
-- This module is the 'program driver' : it associates the various philosophers
-- with their forks. Another way to consider the role of this 'main' module is
-- to consider as being the table around which the philosophers are dining.
VAR
  forks : array 0..21 of { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, nobody};
  p1    : process philosopher(1, forks[0], forks[1]);
  p2    : process philosopher(2, forks[1], forks[2]);
  p3    : process philosopher(3, forks[2], forks[3]);
  p4    : process philosopher(4, forks[3], forks[4]);
  p5    : process philosopher(5, forks[4], forks[5]);
  p6    : process philosopher(6, forks[5], forks[6]);
  p7    : process philosopher(7, forks[6], forks[7]);
  p8    : process philosopher(8, forks[7], forks[8]);
  p9    : process philosopher(9, forks[8], forks[9]);
  p10    : process philosopher(10, forks[9], forks[10]);
  p11    : process philosopher(11, forks[10], forks[11]);
  p12    : process philosopher(12, forks[11], forks[12]);
  p13    : process philosopher(13, forks[12], forks[13]);
  p14    : process philosopher(14, forks[13], forks[14]);
  p15    : process philosopher(15, forks[14], forks[15]);
  p16    : process philosopher(16, forks[15], forks[16]);
  p17    : process philosopher(17, forks[16], forks[17]);
  p18    : process philosopher(18, forks[17], forks[18]);
  p19    : process philosopher(19, forks[18], forks[19]);
  p20    : process philosopher(20, forks[19], forks[20]);
  p21    : process philosopher(21, forks[20], forks[21]);
  p22    : process philosopher(22, forks[21], forks[0]);

ASSIGN
  init(forks[0]) := nobody;
  init(forks[1]) := nobody;
  init(forks[2]) := nobody;
  init(forks[3]) := nobody;
  init(forks[4]) := nobody;
  init(forks[5]) := nobody;
  init(forks[6]) := nobody;
  init(forks[7]) := nobody;
  init(forks[8]) := nobody;
  init(forks[9]) := nobody;
  init(forks[10]) := nobody;
  init(forks[11]) := nobody;
  init(forks[12]) := nobody;
  init(forks[13]) := nobody;
  init(forks[14]) := nobody;
  init(forks[15]) := nobody;
  init(forks[16]) := nobody;
  init(forks[17]) := nobody;
  init(forks[18]) := nobody;
  init(forks[19]) := nobody;
  init(forks[20]) := nobody;
  init(forks[21]) := nobody;

LTLSPEC
  F G (p1.waiting -> F !p1.waiting);

MODULE philosopher(id, left, right)
-- This module models the behavior of one of the philosopher participating to
-- the dinner.
VAR
  status : {thinking, hungry, eating, done};
DEFINE
  gotleft := (left=id);
  gotright:= (right=id);
  waiting := ((status = hungry) & gotleft & !gotright);

ASSIGN
  init(status) := thinking;

  next (status) := case
    status = thinking : {thinking, hungry};
    status = hungry & gotleft & gotright : eating;
    status = eating : {eating, done};
    status = done & !gotleft & !gotright : thinking;
    TRUE : status;
    esac;

  next(left) := case
    status = hungry & left = nobody : id ;
    status = done & gotleft         : nobody;
    TRUE                            : left;
    esac;

  next(right) := case
    status = hungry & gotleft & right = nobody: id;
    status = done   & gotright      : nobody;
    TRUE                            : right;
    esac;

FAIRNESS
  -- This fairness constraint forces NuSMV to consider traces where the
  -- philosophers processes actually do run.
  !waiting;
 